backends:
  aws:
    terraform:
      required_providers:
        aws:
          source: "hashicorp/aws"
          version: "3.51.0"
      backend:
        s3:
          bucket: "{state_storage}"
          key: "{layer_name}"
          dynamodb_table: "{state_storage}"
          region: "{provider[region]}"
  google:
    terraform:
      required_providers:
        google:
          source: "hashicorp/google"
          version: "3.77.0"
      backend:
        gcs:
          bucket: "{state_storage}"
          prefix: "{layer_name}"
  azurerm:
    terraform:
      required_providers:
        azurerm:
          source: "hashicorp/azurerm"
          version: "2.65.0"
      backend:
        azurerm:
          resource_group_name: "opta-{env}"
          storage_account_name: "{state_storage}"
          container_name: "tfstate"
          key: "{layer_name}"

modules:
  azure-base:
    cloud: azure
    location: azure-base
    halt: true
    root_only: true
    variables:
      env_name: str
      layer_name: str
      module_name: str
      location: str
    outputs:
      vpc_id:
        export: true
      private_subnet_id:
        export: true
      acr_id:
        export: true
      acr_name:
        export: true
      acr_login_url:
        export: true
  azure-aks:
    cloud: azure
    location: azure-aks
    halt: true
    root_only: true
    variables:
      env_name: str
      layer_name: str
      module_name: str
      max_nodes: optional
      min_nodes: optional
      node_disk_size: optional
      node_instance_type: optional
      admin_group_object_ids: optional
      kubernetes_version: optional
    outputs:
      k8s_endpoint:
        export: true
      k8s_ca_data:
        export: true
      client_cert:
        export: true
      client_key:
        export: true
      # This output is used by the configure-kubectl cmd
      k8s_cluster_name:
        export: true
    providers:
      provider:
        helm:
          kubernetes:
            host: "${{{module_source}.k8s_endpoint}}"
            client_certificate: "${{base64decode({module_source}.client_cert)}}"
            client_key: "${{base64decode({module_source}.client_key)}}"
            cluster_ca_certificate: "${{base64decode({module_source}.k8s_ca_data)}}"
  azure-k8s-base:
    cloud: azure
    location: azure-k8s-base
    root_only: true
    variables:
      env_name: str
      layer_name: str
      module_name: str
      nginx_high_availability: optional
      linkerd_high_availability: optional
      linkerd_enabled: optional
      private_key: optional
      certificate_body: optional
      certificate_chain: optional
    outputs:
      load_balancer_raw_ip:
        export: true
  azure-k8s-service:
    cloud: azure
    location: azure-k8s-service
    variables:
      env_name: str
      layer_name: str
      module_name: str
      acr_registry_name: str
      image: str
      port: optional
      tag: optional
      env_vars: optional
      manual_secrets: optional
      link_secrets: optional
      autoscaling_target_cpu_percentage: optional
      autoscaling_target_mem_percentage: optional
      liveness_probe_path: optional
      readiness_probe_path: optional
      healthcheck_path: optional
      resource_request: optional
      public_uri: optional
      domain: optional
    outputs:
      docker_repo_url:
        export: true
    inspect:
      helm_release.k8s-service:
        name: K8s Service
        desc: Secure and scalable Kubernetes service packaged into a helm chart
        url: https://app.datadoghq.com/apm/service/{k8s-moduleName}-{k8s-layerName}/
  azure-postgres:
    cloud: azure
    location: azure-postgres
    variables:
      env_name: str
      layer_name: str
      module_name: str
      sku_name: optional
      engine_version: optional
    outputs:
      db_user: str
      db_password: str
      db_host: str
      db_name: str
  azure-redis:
    cloud: azure
    location: azure-redis
    variables:
      env_name: str
      layer_name: str
      module_name: str
      sku_name: optional
      family: optional
      capacity: optional
    outputs:
      cache_host:
        export: true
      cache_auth_token: str
  aws-base:
    cloud: aws
    location: aws-base
    halt: true
    root_only: true
    variables:
      env_name: str
      layer_name: str
      module_name: str
      total_ipv4_cidr_block: optional
      private_ipv4_cidr_blocks: optional
      public_ipv4_cidr_blocks: optional
    outputs:
      s3_log_bucket_name:
        export: true
      kms_account_key_arn:
        export: true
      kms_account_key_id:
        export: true
      vpc_id:
        export: true
      private_subnet_ids:
        export: true
      public_subnets_ids:
        export: true
    providers:
      data:
        aws_caller_identity:
          provider: {}
        aws_region:
          provider: {}
    inspect:
      aws_kms_key:
        name: KMS Key
        desc: General key used for encryption of infra
        url: https://console.aws.amazon.com/kms/home?region=us-east-1#/kms/keys/{key_id}
      aws_vpc:
        name: VPC
        desc: Like your own local network, but hosted on the cloud.
        url: https://console.aws.amazon.com/vpc/home?region={aws_region}#VpcDetails:VpcId={id}
      aws_subnet.public_subnets:
        name: Public Subnet
        desc: Servers in this subnet can have public IP addresses and direct access to the Internet.
        url: https://console.aws.amazon.com/vpc/home?region={aws_region}#SubnetDetails:subnetId={id}
      aws_subnet.private_subnets:
        name: Private Subnet
        desc: Servers in this subnet do not have direct access to the Internet (must use a proxy).
        url: https://console.aws.amazon.com/vpc/home?region={aws_region}#SubnetDetails:subnetId={id}
  aws-nodegroup:
    cloud: aws
    location: aws-nodegroup
    halt: false
    root_only: true
    variables:
      env_name: str
      layer_name: str
      module_name: str
      max_nodes: optional
      min_nodes: optional
      node_disk_size: optional
      node_instance_type: optional
      use_gpu: optional
      spot_instances: optional
    outputs: {}
    inspect:
      aws_eks_node_group:
        name: EKS Node Group
        desc: Managed Kubernetes service.
        url: https://console.aws.amazon.com/eks/home?region={aws_region}#/clusters/{name}
  aws-eks:
    cloud: aws
    location: aws-eks
    halt: true
    root_only: true
    variables:
      env_name: str
      layer_name: str
      module_name: str
      private_subnet_ids: str
      kms_account_key_arn: str
      max_nodes: optional
      min_nodes: optional
      node_disk_size: optional
      node_instance_type: optional
      k8s_version: optional
      control_plane_security_groups: optional
      spot_instances: optional
      node_launch_template: optional
    outputs:
      k8s_endpoint:
        export: true
      k8s_ca_data:
        export: true
      # This output is used by the configure-kubectl cmd
      k8s_cluster_name:
        export: true
      k8s_openid_provider_url:
        export: true
      k8s_openid_provider_arn:
        export: true
      k8s_node_group_security_id:
        export: true
    inspect:
      aws_eks_cluster:
        name: EKS
        desc: Managed Kubernetes service.
        url: https://console.aws.amazon.com/eks/home?region={aws_region}#/clusters/{name}
    providers:
      data:
        aws_eks_cluster_auth:
          k8s:
            name: "${{{module_source}.k8s_cluster_name}}"
      provider:
        helm:
          kubernetes:
            host: "${{{module_source}.k8s_endpoint}}"
            token: "${{data.aws_eks_cluster_auth.k8s.token}}"
            cluster_ca_certificate: "${{base64decode({module_source}.k8s_ca_data)}}"
  datadog:
    cloud: any
    location: datadog
    root_only: true
    variables:
      env_name: str
      layer_name: str
      module_name: str
      api_key: optional
      timeout: optional
      values: optional
  external-ssl-cert:
    cloud: any
    location: external-ssl-cert
    root_only: true
    variables:
      env_name: str
      layer_name: str
      module_name: str
      private_key: str
      certificate_body: str
      certificate_chain: str
      domain: str
    outputs:
      domain:
        export: true
  aws-k8s-base:
    cloud: aws
    location: k8s-base
    root_only: true
    variables:
      env_name: str
      layer_name: str
      module_name: str
      s3_log_bucket_name: str
      openid_provider_url: str
      openid_provider_arn: str
      nginx_high_availability: optional
      nginx_config: optional
      linkerd_high_availability: optional
      linkerd_enabled: optional
      eks_cluster_name: str
      domain: optional
      cert_arn: optional
      admin_arns: optional
      private_key: optional
      certificate_body: optional
      certificate_chain: optional
    outputs: {}
  aws-k8s-service:
    cloud: aws
    location: k8s-service
    variables:
      env_name: str
      layer_name: str
      module_name: str
      image: str
      port: optional
      tag: optional
      env_vars: optional
      manual_secrets: optional
      link_secrets: optional
      autoscaling_target_cpu_percentage: optional
      autoscaling_target_mem_percentage: optional
      liveness_probe_path: optional
      readiness_probe_path: optional
      healthcheck_path: optional
      resource_request: optional
      public_uri: optional
      domain: optional
      openid_provider_url: str
      openid_provider_arn: str
      iam_policy: optional
      additional_iam_policies: optional
      min_containers: optional
      max_containers: optional
    outputs:
      docker_repo_url:
        export: true
    inspect:
      helm_release.k8s-service:
        name: K8s Service
        desc: Secure and scalable Kubernetes service packaged into a helm chart
        url: https://app.datadoghq.com/apm/service/{k8s-moduleName}-{k8s-layerName}/
  aws-documentdb:
    cloud: aws
    location: aws-documentdb
    variables:
      env_name: str
      layer_name: str
      module_name: str
      engine_version: optional
      instance_class: optional
    outputs:
      db_user: str
      db_password: str
      db_host: str
    inspect:
      aws_docdb_cluster:
        name: DocDB
        desc: DocumentDB is a NoSQL database that exposes a similar API to MongoDB.
        url: https://console.aws.amazon.com/docdb/home?region={aws_region}#cluster-details/{cluster_identifier}
  aws-postgres:
    cloud: aws
    location: aws-postgres
    variables:
      env_name: str
      layer_name: str
      module_name: str
      engine_version: optional
      instance_class: optional
      safety: optional
      multi_az: optional
    outputs:
      db_user:
        export: true
      db_password: str
      db_host:
        export: true
      db_name:
        export: true
    inspect:
      aws_rds_cluster:
        name: RDS
        desc: |
          Distributed relational database with support for popular SQL engines
          (Postgres, MySQL, SQL Server, ...)
        url: https://console.aws.amazon.com/rds/home?region={aws_region}#database:id={id};is-cluster=true
  aws-redis:
    cloud: aws
    location: aws-redis
    variables:
      env_name: str
      layer_name: str
      module_name: str
      node_type: optional
      redis_version: optional
    outputs:
      cache_host:
        export: true
      cache_auth_token: str
  aws-dns:
    cloud: aws
    location: aws-dns
    variables:
      env_name: str
      layer_name: str
      module_name: str
      domain: str
      delegated: optional
      upload_cert: optional
      cert_chain_included: optional
      force_update: optional
      external_cert_arn: optional
    outputs:
      zone_id:
        export: true
      name_servers:
        export: true
      domain:
        export: true
  aws-s3:
    cloud: aws
    location: aws-s3
    variables:
      env_name: str
      layer_name: str
      module_name: str
      bucket_name: str
      s3_log_bucket_name: str
      same_region_replication: optional
      block_public: optional
      bucket_policy: optional
      cors_rule: optional
    outputs:
      bucket_id:
        export: true
      bucket_arn:
        export: true
    inspect:
      aws_s3_bucket:
        name: S3 Bucket
        desc: Distributed object storage
        url: https://s3.console.aws.amazon.com/s3/buckets/{id}?region={aws_region}&tab=objects

  gcp-base:
    cloud: google
    location: gcp-base
    halt: true
    root_only: true
    variables:
      env_name: str
      layer_name: str
      module_name: str
      private_ipv4_cidr_blocks: optional
      cluster_ipv4_cidr_block: optional
      services_ipv4_cidr_block: optional
      k8s_master_ipv4_cidr_block: optional
    outputs:
      kms_account_key_self_link:
        export: true
      kms_account_key_id:
        export: true
      vpc_id:
        export: true
      private_subnet_id:
        export: true
      vpc_self_link:
        export: true
      private_subnet_self_link:
        export: true
      k8s_master_ipv4_cidr_block:
        export: true
  gcp-dns:
    cloud: google
    location: gcp-dns
    variables:
      env_name: str
      layer_name: str
      module_name: str
      domain: str
      subdomains: optional
      delegated: optional
    outputs:
      zone_id:
        export: true
      zone_name:
        export: true
      name_servers:
        export: true
      domain:
        export: true
      delegated:
        export: true
      cert_self_link:
        export: true
  gcp-gke:
    cloud: google
    location: gcp-gke
    halt: true
    root_only: true
    variables:
      env_name: str
      layer_name: str
      module_name: str
      max_nodes: optional
      min_nodes: optional
      node_disk_size: optional
      node_instance_type: optional
      gke_channel: optional
      vpc_self_link: str
      private_subnet_self_link: str
      k8s_master_ipv4_cidr_block: true
      node_zone_names: optional
    outputs:
      k8s_endpoint:
        export: true
      k8s_ca_data:
        export: true
      # This output is used by the configure-kubectl cmd
      k8s_cluster_name:
        export: true
    inspect:
      google_container_cluster:
        name: GKE
        desc: Managed Kubernetes service.
        url: https://console.cloud.google.com/kubernetes/clusters/details/{gcp_region}/{cluster_name}/details?folder=&organizationId=&project={gcp_project}
    providers:
      data:
        google_container_cluster:
          k8s:
            name: "${{{module_source}.k8s_cluster_name}}"
            location: "{region}"
      provider:
        helm:
          kubernetes:
            host: "https://${{data.google_container_cluster.k8s.endpoint}}"
            token: "{k8s_access_token}"
            cluster_ca_certificate: "${{base64decode({module_source}.k8s_ca_data)}}"
  gcp-k8s-base:
    cloud: google
    location: gcp-k8s-base
    root_only: true
    variables:
      env_name: str
      layer_name: str
      module_name: str
      nginx_high_availability: optional
      nginx_config: optional
      linkerd_high_availability: optional
      linkerd_enabled: optional
      hosted_zone_name: optional
      cert_self_link: optional
      delegated: optional
      zone_names: optional
      private_key: optional
      certificate_body: optional
      certificate_chain: optional
    outputs:
      load_balancer_raw_ip:
        export: true
  gcp-postgres:
    cloud: google
    location: gcp-postgres
    variables:
      env_name: str
      layer_name: str
      module_name: str
      instance_tier: optional
      engine_version: optional
      safety: optional
    outputs:
      db_user: str
      db_password: str
      db_host: str
      db_name: str
    inspect:
      google_sql_database_instance:
        name: RDS
        desc: |
          Postgres database
        url: https://console.cloud.google.com/sql/instances/{id}/overview?folder=&organizationId=&project={gcp_project}
  gcp-mysql:
    cloud: google
    location: gcp-mysql
    variables:
      env_name: str
      layer_name: str
      module_name: str
      instance_tier: optional
      engine_version: optional
      safety: optional
    outputs:
      db_user: str
      db_password: str
      db_host: str
      db_name: str
    inspect:
      google_sql_database_instance:
        name: RDS
        desc: |
          Mysql database
        url: https://console.cloud.google.com/sql/instances/{id}/overview?folder=&organizationId=&project={gcp_project}
  gcp-redis:
    cloud: google
    location: gcp-redis
    variables:
      env_name: str
      layer_name: str
      module_name: str
      memory_size_gb: optional
      redis_version: optional
      high_availability: optional
    outputs:
      cache_host: str
      cache_auth_token: str
  gcp-gcs:
    cloud: google
    location: gcp-gcs
    variables:
      env_name: str
      layer_name: str
      module_name: str
      bucket_name: str
      block_public: optional
    outputs:
      bucket_id:
        export: true
      bucket_name:
        export: true
    inspect:
      google_storage_bucket:
        name: GCS Bucket
        desc: Distributed object storage
        url: https://console.cloud.google.com/storage/browser/{id}
  gcp-k8s-service:
    cloud: google
    location: gcp-k8s-service
    variables:
      env_name: str
      layer_name: str
      module_name: str
      image: str
      port: optional
      tag: optional
      env_vars: optional
      manual_secrets: optional
      link_secrets: optional
      autoscaling_target_cpu_percentage: optional
      autoscaling_target_mem_percentage: optional
      liveness_probe_path: optional
      readiness_probe_path: optional
      healthcheck_path: optional
      resource_request: optional
      public_uri: optional
      domain: optional
      read_buckets: optional
      write_buckets: optional
      min_containers: optional
      max_containers: optional
    outputs:
      docker_repo_url:
        export: true
    inspect:
      helm_release.k8s-service:
        name: K8s Service
        desc: Secure and scalable Kubernetes service packaged into a helm chart
        url: https://app.datadoghq.com/apm/service/{k8s-moduleName}-{k8s-layerName}/
  runx:
    cloud: any
    location: ""
  helm-chart:
    cloud: any
    location: helm-chart
    variables:
      env_name: str
      layer_name: str
      module_name: str
      chart: str
      repository: optional
      namespace: optional
      create_namespace: optional
      atomic: optional
      wait: optional
      cleanup_on_fail: optional
      chart_version: optional
      values_file: optional
      values: optional
      timeout: optional
      dependency_update: optional
  aws-iam-role:
    cloud: aws
    location: aws-iam-role
    variables:
      env_name: str
      layer_name: str
      module_name: str
      kubernetes_trusts: optional
      allowed_iams: optional
      iam_policy: str
      extra_iam_policies: optional
    outputs:
      role_arn:
        export: true
  aws-iam-user:
    cloud: aws
    location: aws-iam-user
    variables:
      env_name: str
      layer_name: str
      module_name: str
      iam_policy: str
      extra_iam_policies: optional
    outputs:
      user_arn:
        export: true

  aws-ses:
    cloud: aws
    location: aws-ses
    variables:
      env_name: str
      layer_name: str
      module_name: str
      domain: str
      zone_id: str
      mail_from_prefix: optional

  aws-sqs:
    cloud: aws
    location: aws-sqs
    variables:
      env_name: str
      layer_name: str
      module_name: str
      fifo: optional
      content_based_deduplication: optional
      delay_seconds: optional
      message_retention_seconds: optional
      receive_wait_time_seconds: optional
    outputs:
      queue_arn:
        export: true
      queue_id:
        export: true
      queue_name:
        export: true


  aws-sns:
    cloud: aws
    location: aws-sns
    variables:
      env_name: str
      layer_name: str
      module_name: str
      fifo: optional
      content_based_deduplication: optional
      sqs_subscribers: optional
    outputs:
      topic_arn:
        export: true


  postgres:
    alias:
      google: gcp-postgres
      aws: aws-postgres
      azurerm: azure-postgres

  redis:
    alias:
      google: gcp-redis
      aws: aws-redis
      azurerm: azure-redis

  k8s-service:
    alias:
      google: gcp-k8s-service
      aws: aws-k8s-service
      azurerm: azure-k8s-service

  base:
    alias:
      google: gcp-base
      aws: aws-base
      azurerm: azure-base

  k8s-base:
    alias:
      google: gcp-k8s-base
      aws: aws-k8s-base
      azurerm: azure-k8s-base

  k8s-cluster:
    alias:
      google: gcp-gke
      aws: aws-eks
      azurerm: azure-aks

  dns:
    alias:
      google: gcp-dns
      aws: aws-dns

  mysql:
    alias:
      google: gcp-mysql
