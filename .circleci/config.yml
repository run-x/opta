# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  # A parameter per package
  run-create-and-destroy:
    type: boolean
    default: false
  run-aws-create-and-destroy:
    type: boolean
    default: true
  run-gcp-create-and-destroy:
    type: boolean
    default: false
  no-ci:
    type: boolean
    default: true


orbs:
  terraform: circleci/terraform@3.0.0
  codecov: codecov/codecov@3.1.1
  aws-cli: circleci/aws-cli@2.0
  kubernetes: circleci/kubernetes@0.12.1
  helm: circleci/helm@1.2.0
  gcp-cli: circleci/gcp-cli@2.4.0

executors:
  ubuntu_machine:
    machine:
      image: ubuntu-2004:202111-01
  python-docker:
    docker:
      - image: cimg/python:3.8

commands:
  install-python:
    steps:
      - run:
          name: "Installing python version 3.8"
          command: |
            pyenv install 3.8.0
            pyenv global 3.8.0
  install-python-dependencies:
    steps:
      - run:
          name: "Install python dependencies"
          command: |
            pip install pipenv
            pipenv install --deploy --dev
            source $(pipenv --venv)/bin/activate

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  no-pdb:
    executor: ubuntu_machine
    steps:
      - checkout
      - run:
          name: "No PDB"
          command: |
            cd scripts
            ./no_pdb.sh
  lint:
    executor: python-docker
    steps:
      - checkout
      - install-python-dependencies
      - run:
          name: "Lint"
          command: |
            source $(pipenv --venv)/bin/activate
            export PYTHONPATH=$(pwd)
            ./scripts/lint.py

  regula-lint:
    executor: ubuntu_machine
    steps:
      - checkout
      - run:
          name: "Install regula"
          command: |
            cd config
            wget -O regula_1.0.0_Linux_x86_64.tar.gz https://github.com/fugue/regula/releases/download/v1.0.0/regula_1.0.0_Linux_x86_64.tar.gz
            tar -xvf regula_1.0.0_Linux_x86_64.tar.gz
      - run:
          name: "Run regula"
          command: |
            cd config
            ./regula run --include config.rego tf_modules

  python-security:
    executor: python-docker
    steps:
      - checkout
      - install-python-dependencies
      - run:
          name: "Security"
          command: "make security_tests"

  pytest:
    executor: python-docker
    steps:
      - checkout
      - install-python-dependencies
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.0.0
      - run:
          name: "Test with pytest"
          command: |
            export PYTHONPATH=$(pwd)
            pipenv run pytest --cov=./opta --cov-report=xml
      - codecov/upload:
          flags: unittests
          file: ./coverage.xml

  terraform-formatter:
    executor: ubuntu_machine
    steps:
      - checkout
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.0.0
      - run:
          name: "Run terraform format"
          command: "terraform fmt -recursive -check ./config/tf_modules"

  run-aws-create-and-destroy:
    executor: ubuntu_machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.0.0
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: v3.7.1
      - run:
          name: "Git clone the test service"
          command: "git clone git@github.com:run-x/test-service.git"
      - install-python
      - install-python-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Build opta binary"
          command: |
            source $(pipenv --venv)/bin/activate
            export PYTHONPATH=$(pwd)
            make build-binary
      - run:
          name: "Deploy opta environment"
          command: |
            ./dist/opta/opta apply \
            --config ./examples/ci-tests/create-and-destroy-aws/environment.yml \
            --auto-approve \
            --refresh
      - run:
          name: "Apply Websocket Service with Opta"
          command: |
            OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-aws/websocket-service.yml \
            --auto-approve
      - run:
          name: "Test Websocket"
          command: |
            sleep 20
            source $(pipenv --venv)/bin/activate
            export HOST=`./dist/opta/opta output --env awsenv-ci --config ./examples/ci-tests/create-and-destroy-aws/websocket-service.yml | jq -r '.load_balancer_raw_dns'`
            python ./examples/ci-tests/create-and-destroy-aws/websocket-validate.py
            exit $?
      - run:
          name: "Destroy Websocket Service with Opta"
          command: |
            yes | ./dist/opta/opta destroy \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-aws/websocket-service.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi
      - run:
          name: "Add additional Node Group to Opta Environment."
          command: |
            ./dist/opta/opta apply \
            --config ./examples/ci-tests/create-and-destroy-aws/environment-additional-nodegroup.yml \
            --auto-approve
      - run:
          name: "Remove additional Node Group from Opta Environment"
          command: |
            ./dist/opta/opta apply \
            --config ./examples/ci-tests/create-and-destroy-aws/environment.yml \
            --auto-approve
      - run:
          name: "Build test-service image"
          command: docker build -t app:latest -f test-service/Dockerfile test-service/
      - run:
          name: "Set secret"
          command: |
            ./dist/opta/opta secret update \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-aws/service.yml \
            FAKE_SECRET foo
      - run:
          name: "Deploy test-service"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-aws/service.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Deploy test-service with Additional PG"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-aws/service-additional-pg.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Deploy test-service remove Additional PG"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-aws/service.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "View secret and check value"
          command: |
            secret_value=$(./dist/opta/opta secret view \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-aws/service.yml \
            FAKE_SECRET | tail -1)
            echo "This was the found secret value: ${secret_value}"
            [[ "$secret_value" =~ .*"foo".* ]] || exit 1
      - run:
          name: "Destroy environment (and test service)"
          command: |
            yes | ./dist/opta/opta destroy \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-aws/service.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi
            yes | ./dist/opta/opta destroy \
            --config ./examples/ci-tests/create-and-destroy-aws/environment.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  run-gcp-create-and-destroy:
    executor: ubuntu_machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.0.0
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: v3.7.1
      - run:
          name: "Git clone the test service"
          command: "git clone git@github.com:run-x/test-service.git"
      - install-python
      - install-python-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Build opta binary"
          command: |
            source $(pipenv --venv)/bin/activate
            export PYTHONPATH=$(pwd)
            make build-binary
      - run:
          name: "Deploy opta environment"
          command: |
            ./dist/opta/opta apply \
            --config ./examples/ci-tests/create-and-destroy-gcp/environment.yml \
            --auto-approve \
            --refresh
      - run:
          name: "Add additional Node Group to Opta Environment."
          command: |
            ./dist/opta/opta apply \
            --config ./examples/ci-tests/create-and-destroy-gcp/environment-additional-nodegroup.yml \
            --auto-approve
      - run:
          name: "Remove additional Node Group from Opta Environment"
          command: |
            ./dist/opta/opta apply \
            --config ./examples/ci-tests/create-and-destroy-gcp/environment.yml \
            --auto-approve
      - run:
          name: "Build test-service image"
          command: docker build -t app:latest -f test-service/Dockerfile test-service/
      - run:
          name: "Set secret"
          command: |
            ./dist/opta/opta secret update \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-gcp/service.yml \
            FAKE_SECRET foo
      - run:
          name: "Deploy test-service"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-gcp/service.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Deploy test-service with Additional PG"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-gcp/service-additional-pg.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Deploy test-service remove Additional PG"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-gcp/service.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "View secret and check value"
          command: |
            secret_value=$(./dist/opta/opta secret view \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-gcp/service.yml \
            FAKE_SECRET | tail -1)
            echo "This was the found secret value: ${secret_value}"
            [[ "$secret_value" =~ .*"foo".* ]] || exit 1
      - run:
          name: "Destroy environment (and test service)"
          command: |
            yes | ./dist/opta/opta destroy \
            --env awsenv-ci \
            --config ./examples/ci-tests/create-and-destroy-gcp/service.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi
            yes | ./dist/opta/opta destroy \
            --config ./examples/ci-tests/create-and-destroy-gcp/environment.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  say-hello:
    executor: ubuntu_machine
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  version: 2
  run-create-and-destroy:
    when: << pipeline.parameters.run-create-and-destroy >>
    jobs:
      - run-aws-create-and-destroy
      - run-gcp-create-and-destroy

  run-aws-create-and-destroy:
    when: << pipeline.parameters.run-aws-create-and-destroy >>
    jobs:
      - run-aws-create-and-destroy

  run-gcp-create-and-destroy:
    when: << pipeline.parameters.run-gcp-create-and-destroy >>
    jobs:
      - run-gcp-create-and-destroy

  run-ci:
    when:
      not: << pipeline.parameters.no-ci >>
    jobs:
      - say-hello
      - no-pdb
      - lint
      - python-security
      - terraform-formatter
      - regula-lint
      - pytest

  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - run-aws-create-and-destroy
      - run-gcp-create-and-destroy