# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  # A parameter per package
  run-create-and-destroy:
    type: boolean
    default: false
  run-create-and-destroy-azure:
    type: boolean
    default: false
  run-destroy-gcp-env:
    type: boolean
    default: false
  run-destroy-aws-env:
    type: boolean
    default: false
  run-destroy-all-envs:
    type: boolean
    default: false
  run-ci:
    type: boolean
    default: false
  run-create-destroy-local:
    type: boolean
    default: false
  run-service-mesh-e2e:
    type: boolean
    default: false
  test-aws-lambda:
    type: boolean
    default: false
  run-release-vs-stable:
    type: boolean
    default: false
  test-aws-dns:
    type: boolean
    default: false
  run-destroy-aws-dns-false:
    type: boolean
    default: false
  run-destroy-aws-dns-true:
    type: boolean
    default: false
  test:
    type: boolean
    default: false
  ci-use-diff-env:
    type: boolean
    default: false
  ci-env-name:
    type: string
    default: 'env-ci'
  ci-env-region-aws:
    type: string
    default: 'us-east-2'
  ci-env-region-gcp:
    type: string
    default: 'us-central1'
  run-opta-terraform-generate-test:
    type: boolean
    default: false

orbs:
  terraform: circleci/terraform@3.0.0
  codecov: codecov/codecov@3.1.1
  aws-cli: circleci/aws-cli@2.0
  kubernetes: circleci/kubernetes@0.12.1
  helm: circleci/helm@1.2.0
  gcp-cli: circleci/gcp-cli@2.4.0
  azure-cli: circleci/azure-cli@1.2.0

executors:
  ubuntu-machine:
    machine:
      image: ubuntu-2004:202111-01
  python-docker:
    docker:
      - image: cimg/python:3.8

commands:
  install-python:
    steps:
      - run:
          name: "Installing python version 3.8"
          command: |
            pyenv install 3.8.0
            pyenv global 3.8.0
  install-python-dependencies:
    steps:
      - run:
          name: "Install python dependencies"
          command: |
            pip install pipenv
            pipenv install --deploy
            source $(pipenv --venv)/bin/activate

  install-python-dependencies-development:
    steps:
      - run:
          name: "Install python development dependencies"
          command: |
            pip install pipenv
            pipenv install --deploy --dev
            source $(pipenv --venv)/bin/activate

  install-opta-dependencies:
    steps:
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.0.0
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: v3.7.1

  checkout-opta:
    steps:
      - run:
          name: "Set git user"
          command: |
            git config --global user.email "runx-ci@runx.dev"
            git config --global user.name "Runx CI"
      - checkout

# Note:
#  The below command is dependent on the Repo being checked out and should always have a checkout command in the pipeline.
#  This command also requires aws-tg-create-env and gcp-tg-create-env to be run prior to calling this command.
# Usage:
#  Following should always be checked when using this command:
#    - Configuration file should always be present in the .circleci/ci-tests/terraform-generated-<provider-name> folder
#    - Configuration file should me named module-<module-name>.yaml. This should be the same as the name of the module being defined inside.
#    - Respective cloud creation jobs should be called before this command is invoked. (aws-tg-create-env / gcp-tg-create-env).
#    - Always attach the `./` and `~/` workspaces.

  opta-module-with-terraform-generate:
    description: "Command to Generate terraform files and plan those changes"
    parameters:
      module:
        default: ""
        type: string
      provider:
        default: "aws"
        type: string
    steps:
      - run:
          when: always
          name: Generate Terraform Language Files for Opta Module and Terraform plan
          command: |
            echo "Testing Opta module: << parameters.provider >> - << parameters.module >>"
            ./dist/opta/opta generate-terraform \
            --config ./.circleci/ci-tests/terraform-generated-<< parameters.provider >>/module-<< parameters.module >>.yaml \
            --directory $HOME/generated-tf-files-<< parameters.provider >> \
            --auto-approve
            cd $HOME/generated-tf-files-<< parameters.provider >>
            terraform init
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.<< parameters.module >>

# Note: The below command is dependent on the Repo being checked out and should always have a checkout command in the pipeline.
  remake-environment-configs:
    steps:
      - run:
          name: Remake configs.
          command: python ./.circleci/ci-tests/generate_env_config.py << pipeline.parameters.ci-env-name >> << pipeline.parameters.ci-env-region-aws >> << pipeline.parameters.ci-env-region-gcp >>
      - run:
          name: Show configs.
          command: |
            cat ./.circleci/ci-tests/create-and-destroy-aws/environment.yml
            cat ./.circleci/ci-tests/create-and-destroy-aws/environment-additional-nodegroup.yml
            cat ./.circleci/ci-tests/create-and-destroy-gcp/environment.yml
            cat ./.circleci/ci-tests/create-and-destroy-gcp/environment-additional-nodepool.yml
            cat ./.circleci/ci-tests/todo-list/provider-aws-dns-false.yml
            cat ./.circleci/ci-tests/todo-list/provider-aws-dns-true.yml
            cat ./.circleci/ci-tests/todo-list/provider-gcp.yml

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  get-all-parameter-values:
    executor: ubuntu-machine
    steps:
      - run:
          name: Get all parameter values.
          command: |
            echo "run-create-and-destroy:     " << pipeline.parameters.run-create-and-destroy >>
            echo "run-create-and-destroy-azure:     " << pipeline.parameters.run-create-and-destroy-azure >>
            echo "run-destroy-gcp-env:        " << pipeline.parameters.run-destroy-gcp-env >>
            echo "run-destroy-aws-env:        " << pipeline.parameters.run-destroy-aws-env >>
            echo "run-destroy-all-envs:       " << pipeline.parameters.run-destroy-all-envs >>
            echo "run-ci:                     "  << pipeline.parameters.run-ci >>
            echo "run-create-destroy-local:   " << pipeline.parameters.run-create-destroy-local >>
            echo "run-service-mesh-e2e:       " << pipeline.parameters.run-service-mesh-e2e >>
            echo "test-aws-lambda:            " << pipeline.parameters.test-aws-lambda >>
            echo "run-release-vs-stable:      " << pipeline.parameters.run-release-vs-stable >>
            echo "test-aws-dns:               " << pipeline.parameters.test-aws-dns >>
            echo "run-destroy-aws-dns-false:  " << pipeline.parameters.run-destroy-aws-dns-false >>
            echo "run-destroy-aws-dns-true:   " << pipeline.parameters.run-destroy-aws-dns-true >>
            echo "ci-use-diff-env:            " << pipeline.parameters.ci-use-diff-env >>
            echo "ci-env-name:                " << pipeline.parameters.ci-env-name >>
            echo "ci-env-region-aws:          " << pipeline.parameters.ci-env-region-aws >>
            echo "ci-env-region-gcp:          " << pipeline.parameters.ci-env-region-gcp >>
            echo "run-opta-terraform-generate-test: " << pipeline.parameters.run-opta-terraform-generate-test >>

  no-pdb:
    executor: ubuntu-machine
    steps:
      - checkout-opta
      - run:
          name: "No PDB"
          command: |
            cd scripts
            ./no_pdb.sh
  lint:
    executor: python-docker
    steps:
      - checkout-opta
      - install-python-dependencies-development
      - run:
          name: "Lint"
          command: |
            source $(pipenv --venv)/bin/activate
            export PYTHONPATH=$(pwd)
            ./scripts/lint.py

  regula-lint:
    executor: ubuntu-machine
    steps:
      - checkout-opta
      - run:
          name: "Install regula"
          command: |
            cd config
            wget -O regula_1.0.0_Linux_x86_64.tar.gz https://github.com/fugue/regula/releases/download/v1.0.0/regula_1.0.0_Linux_x86_64.tar.gz
            tar -xvf regula_1.0.0_Linux_x86_64.tar.gz
      - run:
          name: "Run regula"
          command: |
            cd config
            ./regula run --include config.rego tf_modules

  python-security:
    executor: python-docker
    steps:
      - checkout-opta
      - install-python-dependencies-development
      - run:
          name: "Security"
          command: "make security_tests"

  pytest:
    executor: python-docker
    steps:
      - checkout-opta
      - install-python-dependencies-development
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.0.0
      - run:
          name: "Test with pytest"
          command: |
            export PYTHONPATH=$(pwd)
            pipenv run pytest --cov=./opta --cov=./modules --cov-report=xml
      - codecov/upload:
          flags: unittests
          file: ./coverage.xml

  terraform-formatter:
    executor: ubuntu-machine
    steps:
      - checkout-opta
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.0.0
      - run:
          name: "Run terraform format"
          command: "terraform fmt -recursive -check ./config/tf_modules"

  download-opta:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - run:
          name: "Download Latest Opta Binary"
          command: /bin/bash -c "$(curl -fsSL https://docs.opta.dev/install.sh)"
      - install-opta-dependencies
      - run:
          name: "Check Opta Version"
          command: |
            $HOME/.opta/opta version
      - persist_to_workspace:
          root: ~/
          paths:
            - .opta

  check-version:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Check Opta Version"
          command: |
            $HOME/.opta/opta version

  build-opta-binary:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - install-python
      - install-python-dependencies
      - run:
          name: "Build opta binary"
          command: |
            source $(pipenv --venv)/bin/activate
            export PYTHONPATH=$(pwd)
            make build-binary
      - persist_to_workspace:
          root: ./
          paths:
            - dist

  az-test-user:
    executor: ubuntu-machine
    steps:
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - run:
          name: "Azure Resources"
          command: "az resource list"

  build-test-service-image:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - run:
          name: "Git clone the test service"
          command: "git clone git@github.com:run-x/test-service.git"
      - run:
          name: "Build test-service image"
          command: docker build -t app:latest -f test-service/Dockerfile test-service/
      - run:
          name: "Save test service"
          command: docker save -o test-service-image app:latest
      - persist_to_workspace:
          root: ./
          paths:
            - test-service-image

  build-opta-example-images:
    executor: ubuntu-machine
    steps:
      - checkout-opta
      - run:
          name: "Git clone Opta Example"
          command: "git clone git@github.com:run-x/opta-examples.git"
      - run:
          name: "Build example images"
          command: |
            docker build --tag todo-api:v1 -f opta-examples/full-stack-example/api/todo-python-django/Dockerfile opta-examples/full-stack-example/api/todo-python-django/
            docker build --tag todo-frontend:v1 -f opta-examples/full-stack-example/frontend/todo-vuejs/Dockerfile opta-examples/full-stack-example/frontend/todo-vuejs/
      - run:
          name: "Save Opta examples"
          command: |
            docker save -o todo-api todo-api:v1
            docker save -o todo-frontend todo-frontend:v1
      - persist_to_workspace:
          root: ./
          paths:
            - todo-api
            - todo-frontend

  aws-generate-terraform-language-files:
    executor: ubuntu-machine
    steps:
      - checkout-opta
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - run:
          name: "Generate Terraform Language Files"
          command: |
            mkdir $HOME/generated-tf-files-aws
            ./dist/opta/opta generate-terraform \
            --config ./.circleci/ci-tests/terraform-generated-aws/environment.yaml \
            --directory $HOME/generated-tf-files-aws \
            --auto-approve
            ./dist/opta/opta generate-terraform \
            --config ./.circleci/ci-tests/terraform-generated-aws/service-hello-opta.yaml \
            --directory $HOME/generated-tf-files-aws \
            --auto-approve
      - persist_to_workspace:
          root: ~/
          paths:
            - generated-tf-files-aws

  aws-tg-create-env:
    executor: ubuntu-machine
    steps:
      - install-opta-dependencies
      - attach_workspace:
          at: ~/
      - run:
          name: "Create Terraform Generated Environment"
          command: |
            cd $HOME/generated-tf-files-aws
            terraform init
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.base
            terraform apply -compact-warnings -auto-approve tf.plan
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.k8scluster
            terraform apply -compact-warnings -auto-approve tf.plan
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.k8sbase
            terraform apply -compact-warnings -auto-approve tf.plan
      - persist_to_workspace:
          root: ~/
          paths:
            - generated-tf-files-aws/tfstate/awsenv-tg.tfstate
      - store_artifacts:
          path: ../generated-tf-files-aws/tfstate/awsenv-tg.tfstate
          destination: tfstate-after-apply-env.tfstate


  aws-tg-test-service-http:
    executor: ubuntu-machine
    steps:
      - install-opta-dependencies
      - attach_workspace:
          at: ~/
      - run:
          name: "Create Terraform Generated Hello Opta Service"
          command: |
            cd $HOME/generated-tf-files-aws
            terraform init
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.hello
            terraform apply -compact-warnings -auto-approve tf.plan
      - run:
          name: "Sleep 120 seconds"
          command: |
            sleep 120
      - run:
          name: "Get Output and Test Load Balancer"
          command: |
            cd $HOME/generated-tf-files-aws
            terraform output -json >> terraform_output.json
            export LOAD_BALANCER=`cat terraform_output.json | jq -r '.load_balancer_raw_dns' |jq -r '.value'`
            echo $LOAD_BALANCER
            curl "$LOAD_BALANCER/hello"
            echo "1"
      - run:
          name: "Sleep 120 seconds"
          command: |
            sleep 120
      - run:
          name: "Destroy Terraform Generated Hello Opta Service"
          command: |
            cd $HOME/generated-tf-files-aws
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.hello -destroy
            terraform apply -compact-warnings -auto-approve tf.plan
      - persist_to_workspace:
          root: ~/
          paths:
            - generated-tf-files-aws/tfstate/awsenv-tg.tfstate
      - store_artifacts:
          path: ../generated-tf-files-aws/tfstate/awsenv-tg.tfstate
          destination: tfstate-after-apply-hello-cnd.tfstate

  aws-tg-test-other-modules-plan:
    executor: ubuntu-machine
    steps:
      - checkout-opta
      - install-opta-dependencies
      - attach_workspace:
          at: ~/
      - attach_workspace:
          at: ./
      - opta-module-with-terraform-generate:
          module: "bucket"
      - opta-module-with-terraform-generate:
          module: "docdb"
      - opta-module-with-terraform-generate:
          module: "helmchart"
      - opta-module-with-terraform-generate:
          module: "mysql"
      - opta-module-with-terraform-generate:
          module: "redis"
      - opta-module-with-terraform-generate:
          module: "pg"
      - opta-module-with-terraform-generate:
          module: "awsiamrole"
      - opta-module-with-terraform-generate:
          module: "awsiamuser"
      - opta-module-with-terraform-generate:
          module: "sns"
      - opta-module-with-terraform-generate:
          module: "sqs"
      - opta-module-with-terraform-generate:
          module: "dynamodb"

  aws-tg-destroy-env:
    executor: ubuntu-machine
    steps:
      - install-opta-dependencies
      - attach_workspace:
          at: ~/
      - run:
          name: "Destroy Terraform Generated Environment"
          command: |
            cd $HOME/generated-tf-files-aws
            terraform init
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.base -target=module.k8scluster -target=module.k8sbase -destroy
            terraform apply -compact-warnings -auto-approve tf.plan
      - run:
          name: "Destroy Terraform Generated Environment (retry)"
          when: on_fail
          command: |
            cd $HOME/generated-tf-files-aws
            terraform init
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.base -target=module.k8scluster -target=module.k8sbase -destroy
            terraform apply -compact-warnings -auto-approve tf.plan
      - store_artifacts:
          path: ../generated-tf-files-aws/tfstate/awsenv-tg.tfstate
          destination: tfstate-after-destroy.tfstate

  azure-create-env:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - attach_workspace:
          at: ~/
      - install-opta-dependencies
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - run:
          name: Run opta apply on environment configuration
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/create-and-destroy-azure/environment.yaml \
            --auto-approve \
            --refresh

  azure-test-service-http:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - attach_workspace:
          at: ~/
      - install-opta-dependencies
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - run:
          name: Run opta apply on HTTP service configuration
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/create-and-destroy-azure/service-http.yaml \
            --auto-approve \
            --refresh
      - run:
          name: Run opta destroy on HTTP service configuration
          command: |
            ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/create-and-destroy-azure/service-http.yaml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  azure-destroy-env:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - attach_workspace:
          at: ~/
      - install-opta-dependencies
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - run:
          name: Run opta destroy on environment configuration
          command: |
            ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/create-and-destroy-azure/environment.yaml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-create-env:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Deploy opta environment"
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/create-and-destroy-aws/environment.yml \
            --auto-approve \
            --refresh
      - run:
          name: "Update KUBECONFIG"
          command: echo 'export KUBECONFIG="$HOME/kube_config.yaml"' >> $BASH_ENV
      - run:
          name: "Configure Kubectl"
          command: |
            ./dist/opta/opta configure-kubectl \
            --config ./.circleci/ci-tests/create-and-destroy-aws/environment.yml

  aws-create-env-dns-false:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Deploy opta environment with DNS Delegated False"
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/todo-list/provider-aws-dns-false.yml \
            --auto-approve \
            --refresh

  aws-create-env-set-ns:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Run the Script for Setting NS"
          command: ./.circleci/ci-tests/todo-list/set-ns.sh ./.circleci/ci-tests/todo-list/provider-aws-dns-false.yml

  aws-dns-test:
    executor: ubuntu-machine
    steps:
      - run:
          name: "Curl Test for testing.optaci.com"
          command: curl --fail http://testing.optaci.com || if [[ $? -eq 22 ]]; then true; else exit $?; fi

  aws-create-env-dns-true:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Deploy opta environment with DNS Delegated False"
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/todo-list/provider-aws-dns-true.yml \
            --auto-approve \
            --refresh

  aws-create-env-stable-version:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ~/
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Deploy opta environment"
          command: |
            yes | $HOME/.opta/opta apply \
            --config ./.circleci/ci-tests/create-and-destroy-aws/environment.yml \
            --auto-approve \
            --refresh || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-test-cloudfront:
    executor: python-docker
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - install-python-dependencies
      - run:
          name: "Apply Cloudfront Service with Opta"
          command: |
            OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-cloudfront.yml \
            --auto-approve
      - run:
          name: "Test Cloudfront curl"
          command: |
            sleep 20
            export HOST=`./dist/opta/opta output --env awsenv-ci --config ./.circleci/ci-tests/create-and-destroy-aws/service-cloudfront.yml | jq -r '.cloudfront_domain'`
            curl --fail https://${HOST}
      - run:
          name: "Destroy Cloudfront Service with Opta"
          command: |
            yes | ./dist/opta/opta destroy \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-cloudfront.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-test-lambda-function:
    executor: python-docker
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - install-python-dependencies
      - run:
          name: "Apply Cloudfront Service with Opta"
          command: |
            OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-lambda.yml \
            --auto-approve
      - run:
          name: "Test Lambda Invocation"
          command: |
            sleep 20
            export LAMBDA_NAME=`./dist/opta/opta output --env awsenv-ci --config ./.circleci/ci-tests/create-and-destroy-aws/service-lambda.yml | jq -r '.function_name'`
            export AWS_DEFAULT_REGION="us-east-2"
            aws lambda invoke --function-name $LAMBDA_NAME  ./.circleci/ci-tests/create-and-destroy-aws/service-lambda.txt
            export RESPONSE=`cat ./.circleci/ci-tests/create-and-destroy-aws/service-lambda.txt`

      - run:
          name: "Destroy Cloudfront Service with Opta"
          command: |
            yes | ./dist/opta/opta destroy \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-lambda.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-test-websocket:
    executor: python-docker
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - install-python-dependencies
      - run:
          name: "Apply Websocket Service with Opta"
          command: |
            OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/websocket-service.yml \
            --auto-approve
      - run:
          name: "Test Websocket"
          command: |
            sleep 20
            source $(pipenv --venv)/bin/activate
            DIRTY_HOST_NAME="{`./dist/opta/opta output --config ./.circleci/ci-tests/create-and-destroy-aws/environment.yml | grep load_balancer_raw_dns`\"\":\"\"}"
            export HOST=`echo $DIRTY_HOST_NAME | jq -r '.load_balancer_raw_dns'`
            python ./.circleci/ci-tests/create-and-destroy-aws/websocket-validate.py
            exit $?
      - run:
          name: "Destroy Websocket Service with Opta"
          command: |
            yes | ./dist/opta/opta destroy \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/websocket-service.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-test-websocket-stable-version:
    executor: python-docker
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ~/
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - install-python-dependencies
      - run:
          name: "Apply Websocket Service with Stable Opta"
          command: |
            yes | $HOME/.opta/opta apply \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/websocket-service.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi
      - run:
          name: "Test Websocket"
          command: |
            sleep 20
            source $(pipenv --venv)/bin/activate
            DIRTY_HOST_NAME="{`$HOME/.opta/opta output --config ./.circleci/ci-tests/create-and-destroy-aws/environment.yml | grep load_balancer_raw_dns`\"\":\"\"}"
            export HOST=`echo $DIRTY_HOST_NAME | jq -r '.load_balancer_raw_dns'`
            python ./.circleci/ci-tests/create-and-destroy-aws/websocket-validate.py
            exit $?
      - run:
          name: "Destroy Websocket Service with Opta"
          command: |
            yes | $HOME/.opta/opta destroy \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/websocket-service.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-test-additional-nodegroup:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Add additional Node Group to Opta Environment."
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/create-and-destroy-aws/environment-additional-nodegroup.yml \
            --auto-approve
      - run:
          name: "Remove additional Node Group from Opta Environment"
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/create-and-destroy-aws/environment.yml \
            --auto-approve

  aws-test-k8s-manifest:
    executor: python-docker
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - install-python-dependencies
      - run:
          name: "Update KUBECONFIG"
          command: echo 'export KUBECONFIG="$HOME/kube_config.yaml"' >> $BASH_ENV
      - run:
          name: "Configure Kubectl"
          command: |
            ./dist/opta/opta configure-kubectl \
            --config ./.circleci/ci-tests/create-and-destroy-aws/environment.yml
      - run:
          name: "Apply K8s Manifest with Opta"
          command: |
            ./dist/opta/opta apply \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/k8s-manifest.yaml \
            --auto-approve
      - run:
          name: "Test manifest pod creation"
          command: |
            kubectl get pod -n default nginx
            exit $?
      - run:
          name: "Destroy K8s Manifest with Opta"
          command: |
            yes | ./dist/opta/opta destroy \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/k8s-manifest.yaml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-test-service-helm:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Deploy test-service-helm"
          command: |
            ./dist/opta/opta apply \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-helm.yml \
            --auto-approve
      - run:
          name: "Destroy test-service-helm"
          command: |
            yes | ./dist/opta/opta destroy \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-helm.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-test-service-s3:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Load test-service image"
          command: docker load -i test-service-image
      - run:
          name: "Deploy test-service-s3"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-s3.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Destroy test-service-s3"
          command: |
            yes | ./dist/opta/opta destroy \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-s3.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-test-service-redis:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Load test-service image"
          command: docker load -i test-service-image
      - run:
          name: "Deploy test-service-redis"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-redis.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Destroy test-service-redis"
          command: |
            yes | ./dist/opta/opta destroy \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-redis.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-test-service-docdb:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Load test-service image"
          command: docker load -i test-service-image
      - run:
          name: "Deploy test-service-redis"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-docdb.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Destroy test-service-redis"
          command: |
            yes | ./dist/opta/opta destroy \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-docdb.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-test-service-pg:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - install-python-dependencies
      - run:
          name: "Load test-service image"
          command: docker load -i test-service-image
      - run:
          name: "Set secret"
          command: |
            ./dist/opta/opta secret update \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-pg.yml \
            FAKE_SECRET foo
      - run:
          name: "Deploy test-service"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-pg.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Update KUBECONFIG"
          command: echo 'export KUBECONFIG="$HOME/kube_config.yaml"' >> $BASH_ENV
      - run:
          name: "Configure Kubectl"
          command: |
            ./dist/opta/opta configure-kubectl \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-pg.yml
      - run:
          name: "Test Opta Shell"
          command: |
            source $(pipenv --venv)/bin/activate
            export PYTHONPATH=$(pwd)
            python ./.circleci/ci-tests/opta-shell-test.py \
            ./.circleci/ci-tests/create-and-destroy-aws/service-pg.yml
      - run:
          name: "Opta logs"
          command: |
            ./dist/opta/opta logs \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-pg.yml >> logs.log
          background: true
      - run:
          name: "Check opta logs"
          command: |
            sleep 90
            pkill -SIGQUIT opta
            cat logs.log | grep "\"GET /healthcheck HTTP/1.1\" 200"
            exit $?
      - run:
          name: "Deploy test-service with Additional PG"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-additional-pg.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Deploy test-service remove Additional PG"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-pg.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "View secret and check value"
          command: |
            secret_value=$(./dist/opta/opta secret view \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-pg.yml \
            FAKE_SECRET | grep foo)
            echo "This was the found secret value: ${secret_value}"
            [[ "$secret_value" =~ .*"foo".* ]] || exit 1
      - run:
          name: "Destroy test service"
          command: |
            yes | ./dist/opta/opta destroy \
            --env awsenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-aws/service-pg.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-opta-example-create-svcs:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Load Opta Example images"
          command: |
            docker load -i todo-api
            docker load -i todo-frontend
      - run:
          name: "Deploy Todo-Api Service"
          command: |
            ./dist/opta/opta deploy \
            --image todo-api:v1 \
            --config ./.circleci/ci-tests/todo-list/api-service.yml \
            --env awsenv-ci \
            --auto-approve
      - run:
          name: "Deploy Todo-Frontend Service"
          command: |
            ./dist/opta/opta deploy \
            --image todo-frontend:v1 \
            --config ./.circleci/ci-tests/todo-list/frontend-service.yml \
            --env awsenv-ci \
            --auto-approve
      - run:
          name: "Deploy Monitoring Service"
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/todo-list/monitoring-service.yml \
            --env awsenv-ci \
            --auto-approve
      - run:
          name: "Ping Tests"
          command: |
            DIRTY_HOST_NAME="{`./dist/opta/opta output -c ./.circleci/ci-tests/create-and-destroy-aws/environment.yml | grep load_balancer_raw_dns`\"\":\"\"}"
            export HOST_NAME=`echo $DIRTY_HOST_NAME | jq -r '.load_balancer_raw_dns'`
            curl $HOST_NAME/frontend --fail
            curl $HOST_NAME/djangoapi/ht/ --fail
            curl $HOST_NAME/grafana --fail

  aws-opta-example-destroy-svcs:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Destroy Monitoring Service"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/todo-list/monitoring-service.yml \
            --env awsenv-ci \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi
      - run:
          name: "Destroy Todo-Frontend Service"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/todo-list/frontend-service.yml \
            --env awsenv-ci \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi
      - run:
          name: "Destroy Todo-Api Service"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/todo-list/api-service.yml \
            --env awsenv-ci \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-destroy-env:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Destroy environment"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/create-and-destroy-aws/environment.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-destroy-env-dns-false:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Destroy environment with DNS Delegated True"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/todo-list/provider-aws-dns-false.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-destroy-env-dns-true:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Destroy environment with DNS Delegated True"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/todo-list/provider-aws-dns-true.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  aws-destroy-env-stable-version:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ~/
      - install-opta-dependencies
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: "Destroy environment"
          command: |
            yes | $HOME/.opta/opta destroy \
            --config ./.circleci/ci-tests/create-and-destroy-aws/environment.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  gcp-generate-terraform-language-files:
    executor: ubuntu-machine
    steps:
      - checkout-opta
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Generate Terraform Language Files"
          command: |
            mkdir $HOME/generated-tf-files-gcp
            ./dist/opta/opta generate-terraform \
            --config ./.circleci/ci-tests/terraform-generated-gcp/environment.yaml \
            --directory $HOME/generated-tf-files-gcp \
            --auto-approve
            ./dist/opta/opta generate-terraform \
            --config ./.circleci/ci-tests/terraform-generated-gcp/service-hello-opta.yaml \
            --directory $HOME/generated-tf-files-gcp \
            --auto-approve
      - persist_to_workspace:
          root: ~/
          paths:
            - generated-tf-files-gcp

  gcp-tg-create-env:
    executor: ubuntu-machine
    steps:
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - attach_workspace:
          at: ~/
      - run:
          name: "Create Terraform Generated Environment"
          command: |
            cd $HOME/generated-tf-files-gcp
            terraform init
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.base
            terraform apply -compact-warnings -auto-approve tf.plan
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.k8scluster
            terraform apply -compact-warnings -auto-approve tf.plan
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.k8sbase
            terraform apply -compact-warnings -auto-approve tf.plan
      - persist_to_workspace:
          root: ~/
          paths:
            - generated-tf-files-gcp/tfstate/gcpenv-tg.tfstate
      - store_artifacts:
          path: ../generated-tf-files-gcp/tfstate/gcpenv-tg.tfstate
          destination: tfstate-after-apply-env.tfstate


  gcp-tg-test-service-http:
    executor: ubuntu-machine
    steps:
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - attach_workspace:
          at: ~/
      - run:
          name: "Create Terraform Generated Hello Opta Service"
          command: |
            cd $HOME/generated-tf-files-gcp
            terraform init
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.hello
            terraform apply -compact-warnings -auto-approve tf.plan
      - run:
          name: "Sleep 120 seconds"
          command: |
            sleep 120
      - run:
          name: "Get Output and Test Load Balancer"
          command: |
            cd $HOME/generated-tf-files-gcp
            terraform output -json >> terraform_output.json
            export LOAD_BALANCER=`cat terraform_output.json | jq -r '.load_balancer_raw_ip' |jq -r '.value'`
            echo $LOAD_BALANCER
            curl "$LOAD_BALANCER/hello"
            echo "1"
      - run:
          name: "Sleep 120 seconds"
          command: |
            sleep 120
      - run:
          name: "Destroy Terraform Generated Hello Opta Service"
          command: |
            cd $HOME/generated-tf-files-gcp
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.hello -destroy
            terraform apply -compact-warnings -auto-approve tf.plan
      - persist_to_workspace:
          root: ~/
          paths:
            - generated-tf-files-gcp/tfstate/gcpenv-tg.tfstate
      - store_artifacts:
          path: ../generated-tf-files-gcp/tfstate/gcpenv-tg.tfstate
          destination: tfstate-after-apply-hello-cnd.tfstate

  gcp-tg-test-other-modules-plan:
    executor: ubuntu-machine
    steps:
      - checkout-opta
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - attach_workspace:
          at: ~/
      - attach_workspace:
          at: ./
      - opta-module-with-terraform-generate:
          module: "gcs"
          provider: "gcp"
      - opta-module-with-terraform-generate:
          module: "mysql"
          provider: "gcp"
      - opta-module-with-terraform-generate:
          module: "pg"
          provider: "gcp"
      - opta-module-with-terraform-generate:
          module: "redis"
          provider: "gcp"
      - opta-module-with-terraform-generate:
          module: "serviceaccount"
          provider: "gcp"

  gcp-tg-destroy-env:
    executor: ubuntu-machine
    steps:
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - attach_workspace:
          at: ~/
      - run:
          name: "Destroy Terraform Generated Environment"
          command: |
            cd $HOME/generated-tf-files-gcp
            terraform init
            terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.base -target=module.k8scluster -target=module.k8sbase -destroy
            terraform apply -compact-warnings -auto-approve tf.plan
      - store_artifacts:
          path: ../generated-tf-files-gcp/tfstate/gcpenv-tg.tfstate
          destination: tfstate-after-destroy.tfstate

  gcp-create-env:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Deploy opta environment"
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/environment.yml \
            --auto-approve \
            --refresh
      - run:
          name: "Update KUBECONFIG"
          command: echo 'export KUBECONFIG="$HOME/kube_config.yaml"' >> $BASH_ENV
      - run:
          name: "Configure Kubectl"
          command: |
            ./dist/opta/opta configure-kubectl \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/environment.yml

  gcp-create-env-stable-version:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ~/
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Deploy opta environment"
          command: |
            yes | $HOME/.opta/opta apply \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/environment.yml \
            --auto-approve \
            --refresh || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  gcp-test-additional-nodegroup:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Add additional Node Group to Opta Environment."
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/environment-additional-nodepool.yml \
            --auto-approve
      - run:
          name: "Remove additional Node Group from Opta Environment"
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/environment.yml \
            --auto-approve

  gcp-test-k8s-manifest:
    executor: python-docker
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Update KUBECONFIG"
          command: echo 'export KUBECONFIG="$HOME/kube_config.yaml"' >> $BASH_ENV
      - run:
          name: "Configure Kubectl"
          command: |
            ./dist/opta/opta configure-kubectl \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/environment.yml
      - run:
          name: "Apply K8s Manifest with Opta"
          command: |
            ./dist/opta/opta apply \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/k8s-manifest.yaml \
            --auto-approve
      - run:
          name: "Test manifest pod creation"
          command: |
            kubectl get pod -n default nginx
            exit $?
      - run:
          name: "Destroy K8s Manifest with Opta"
          command: |
            yes | ./dist/opta/opta destroy \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/k8s-manifest.yaml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  gcp-test-service-helm:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Load test-service image"
          command: docker load -i test-service-image
      - run:
          name: "Deploy test-service-helm"
          command: |
            ./dist/opta/opta apply \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-helm.yml \
            --auto-approve
      - run:
          name: "Destroy test-service-helm"
          command: |
            yes | ./dist/opta/opta destroy \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-helm.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  gcp-test-service-redis:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Load test-service image"
          command: docker load -i test-service-image
      - run:
          name: "Deploy test-service-redis"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-redis.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Destroy test-service-redis"
          command: |
            yes | ./dist/opta/opta destroy \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-redis.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  gcp-test-service-gcs:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Load test-service image"
          command: docker load -i test-service-image
      - run:
          name: "Deploy test-service-gcs"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-gcs.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Destroy test-service-gcs"
          command: |
            yes | ./dist/opta/opta destroy \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-gcs.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  gcp-test-service-pg:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - install-python-dependencies
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Load test-service image"
          command: docker load -i test-service-image
      - run:
          name: "Set secret"
          command: |
            ./dist/opta/opta secret update \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml \
            FAKE_SECRET foo
      - run:
          name: "Deploy test-service-pg"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Update KUBECONFIG"
          command: echo 'export KUBECONFIG="$HOME/kube_config.yaml"' >> $BASH_ENV
      - run:
          name: "Configure Kubectl"
          command: |
            ./dist/opta/opta configure-kubectl \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml
      - run:
          name: "Test Opta Shell"
          command: |
            source $(pipenv --venv)/bin/activate
            export PYTHONPATH=$(pwd)
            python ./.circleci/ci-tests/opta-shell-test.py \
            ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml
      - run:
          name: "Opta logs"
          command: |
            ./dist/opta/opta logs \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml >> logs.log
          background: true
      - run:
          name: "Check opta logs"
          command: |
            sleep 90
            pkill -SIGQUIT opta
            cat logs.log | grep "\"GET /healthcheck HTTP/1.1\" 200"
            exit $?
      - run:
          name: "Deploy test-service with Additional PG"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-additional-pg.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "Deploy test-service remove Additional PG"
          command: |
            ./dist/opta/opta deploy \
            --image app:latest \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve
      - run:
          name: "View secret and check value"
          command: |
            secret_value=$(./dist/opta/opta secret view \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml \
            FAKE_SECRET | grep foo)
            echo "This was the found secret value: ${secret_value}"
            [[ "$secret_value" =~ .*"foo".* ]] || exit 1
      - run:
          name: "Destroy test-service-pg"
          command: |
            yes | ./dist/opta/opta destroy \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  gcp-test-service-pg-latest-version:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ~/
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Load test-service image"
          command: docker load -i test-service-image
      - run:
          name: "Set secret"
          command: |
            yes | $HOME/.opta/opta secret update \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml \
            FAKE_SECRET foo || if [[ $? -eq 141 ]]; then true; else exit $?; fi
      - run:
          name: "Deploy test-service-pg"
          command: |
            yes | $HOME/.opta/opta deploy \
            --image app:latest \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi
      - run:
          name: "Deploy test-service with Additional PG"
          command: |
            yes | $HOME/.opta/opta deploy \
            --image app:latest \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-additional-pg.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi
      - run:
          name: "Deploy test-service remove Additional PG"
          command: |
            yes | $HOME/.opta/opta deploy \
            --image app:latest \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml \
            --tag $CIRCLE_SHA1 \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi
      - run:
          name: "View secret and check value"
          command: |
            secret_value=$($HOME/.opta/opta secret view \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml \
            FAKE_SECRET | grep foo)
            echo "This was the found secret value: ${secret_value}"
            [[ "$secret_value" =~ .*"foo".* ]] || exit 1
      - run:
          name: "Destroy test-service-pg"
          command: |
            yes | $HOME/.opta/opta destroy \
            --env gcpenv-ci \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/service-pg.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  gcp-destroy-env:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up gcp envar"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Destroy environment"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/create-and-destroy-gcp/environment.yml \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  gcp-opta-example-create-svcs:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up GCP Credentials"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Load Opta Example images"
          command: |
            docker load -i todo-api
            docker load -i todo-frontend
      - run:
          name: "Deploy Todo-Api Service"
          command: |
            ./dist/opta/opta deploy \
            --image todo-api:v1 \
            --config ./.circleci/ci-tests/todo-list/api-service.yml \
            --env gcpenv-ci \
            --auto-approve
      - run:
          name: "Deploy Todo-Frontend Service"
          command: |
            ./dist/opta/opta deploy \
            --image todo-frontend:v1 \
            --config ./.circleci/ci-tests/todo-list/frontend-service.yml \
            --env gcpenv-ci \
            --auto-approve
      - run:
          name: "Deploy Monitoring Service"
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/todo-list/monitoring-service.yml \
            --env gcpenv-ci \
            --auto-approve
      - run:
          name: "Ping Tests"
          command: |
            DIRTY_HOST_NAME="{`./dist/opta/opta output -c ./.circleci/ci-tests/create-and-destroy-gcp/environment.yml | grep load_balancer_raw_ip`\"\":\"\"}"
            export HOST_NAME=`echo $DIRTY_HOST_NAME | jq -r '.load_balancer_raw_ip'`
            curl $HOST_NAME/frontend --fail
            curl $HOST_NAME/djangoapi/ht/ --fail
            curl $HOST_NAME/grafana --fail

  gcp-opta-example-destroy-svcs:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: "Setting up GCP Credentials"
          command: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/home/circleci/gcloud-service-key.json"' >> $BASH_ENV
      - run:
          name: "Destroy Monitoring Service"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/todo-list/monitoring-service.yml \
            --env gcpenv-ci \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi
      - run:
          name: "Destroy Todo-Frontend Service"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/todo-list/frontend-service.yml \
            --env gcpenv-ci \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi
      - run:
          name: "Destroy Todo-Api Service"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/todo-list/api-service.yml \
            --env gcpenv-ci \
            --auto-approve || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  local-opta-example-create-svcs:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - run:
          name: "Load Opta Example images"
          command: |
            docker load -i todo-api
            docker load -i todo-frontend
      - run:
          name: "Deploy Todo-Api Service"
          command: |
            ./dist/opta/opta deploy \
            --image todo-api:v1 \
            --config ./.circleci/ci-tests/todo-list/api-service.yml \
            --auto-approve \
            --local
      - run:
          name: "Deploy Todo-Frontend Service"
          command: |
            ./dist/opta/opta deploy \
            --image todo-frontend:v1 \
            --config ./.circleci/ci-tests/todo-list/frontend-service.yml \
            --auto-approve \
            --local
      - run:
          name: "Deploy Monitoring Service"
          command: |
            ./dist/opta/opta apply \
            --config ./.circleci/ci-tests/todo-list/monitoring-service.yml \
            --auto-approve \
            --local
      - run:
          name: "Ping Tests"
          command: |
            curl http://localhost:8080/frontend --fail
            curl http://localhost:8080/djangoapi/ht/ --fail
            curl http://localhost:8080/grafana --fail

  local-opta-example-destroy-svcs:
    executor: ubuntu-machine
    environment:
      OPTA_DISABLE_REPORTING: "true"
    steps:
      - checkout-opta
      - when:
          condition: << pipeline.parameters.ci-use-diff-env >>
          steps:
            - remake-environment-configs
      - attach_workspace:
          at: ./
      - install-opta-dependencies
      - run:
          name: "Destroy Monitoring Service"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/todo-list/monitoring-service.yml \
            --auto-approve \
            --local || if [[ $? -eq 141 ]]; then true; else exit $?; fi
      - run:
          name: "Destroy Todo-Frontend Service"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/todo-list/frontend-service.yml \
            --auto-approve \
            --local || if [[ $? -eq 141 ]]; then true; else exit $?; fi
      - run:
          name: "Destroy Todo-Api Service"
          command: |
            yes | ./dist/opta/opta destroy \
            --config ./.circleci/ci-tests/todo-list/api-service.yml \
            --auto-approve \
            --local || if [[ $? -eq 141 ]]; then true; else exit $?; fi

  say-hello:
    executor: ubuntu-machine
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout-opta
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  version: 2
  run-create-and-destroy:
    when: << pipeline.parameters.run-create-and-destroy >>
    jobs: &fullsuite
      - get-all-parameter-values
      - build-test-service-image
      - build-opta-example-images
      - build-opta-binary:
          requires:
            - build-test-service-image
      - aws-create-env:
          requires:
            - build-opta-binary
      - aws-test-cloudfront:
          requires:
            - aws-create-env
      - aws-test-lambda-function:
          requires:
            - aws-create-env
      - aws-test-websocket:
          requires:
            -  aws-create-env
      - aws-test-additional-nodegroup:
          requires:
            - aws-create-env
      - aws-test-service-pg:
          requires:
            - aws-create-env
      - aws-test-service-redis:
          requires:
            - aws-create-env
      - aws-test-service-docdb:
          requires:
            - aws-create-env
      - aws-test-service-s3:
          requires:
            - aws-create-env
      - aws-test-service-helm:
          requires:
            - aws-create-env
      - aws-test-k8s-manifest:
          requires:
            - aws-create-env
      - aws-destroy-env:
          requires:
            - aws-test-websocket
            - aws-test-cloudfront
            - aws-test-lambda-function
            - aws-test-additional-nodegroup
            - aws-test-service-pg
            - aws-test-service-s3
            - aws-test-service-docdb
            - aws-test-service-redis
            - aws-test-service-helm
            - aws-test-k8s-manifest
      - gcp-create-env:
          requires:
            - build-opta-binary
      - gcp-test-additional-nodegroup:
          requires:
            - gcp-create-env
      - gcp-test-service-pg:
          requires:
            - gcp-create-env
      - gcp-test-service-redis:
          requires:
            - gcp-create-env
      - gcp-test-service-helm:
          requires:
            - gcp-create-env
      - gcp-test-service-gcs:
          requires:
            - gcp-create-env
      - gcp-test-k8s-manifest:
          requires:
            - gcp-create-env
      - gcp-destroy-env:
          requires:
            - gcp-test-additional-nodegroup
            - gcp-test-service-pg
            - gcp-test-service-redis
            - gcp-test-service-helm
            - gcp-test-service-gcs
            - gcp-test-k8s-manifest
      - local-opta-example-create-svcs:
          requires:
            - build-opta-binary
            - build-opta-example-images
      - local-opta-example-destroy-svcs:
          requires:
            - local-opta-example-create-svcs
      - azure-create-env:
          requires:
            - build-opta-binary
      - azure-test-service-http:
          requires:
            - azure-create-env
      - azure-destroy-env:
          requires:
            - azure-test-service-http
      - aws-generate-terraform-language-files:
          requires:
            - build-opta-binary
      - aws-tg-create-env:
          requires:
            - aws-generate-terraform-language-files
      - aws-tg-test-service-http:
          requires:
            - aws-tg-create-env
      - aws-tg-test-other-modules-plan:
          requires:
            - aws-tg-create-env
      - aws-tg-destroy-env:
          requires:
            - aws-tg-test-service-http
            - aws-tg-test-other-modules-plan
      - gcp-generate-terraform-language-files:
          requires:
            - build-opta-binary
      - gcp-tg-create-env:
          requires:
            - gcp-generate-terraform-language-files
      - gcp-tg-test-service-http:
          requires:
            - gcp-tg-create-env
      - gcp-tg-test-other-modules-plan:
          requires:
            - gcp-tg-create-env
      - gcp-tg-destroy-env:
          requires:
            - gcp-tg-test-service-http
            - gcp-tg-test-other-modules-plan
  run-ci:
    when: << pipeline.parameters.run-ci >>
    jobs:
      - say-hello
      - no-pdb
      - lint
      - python-security
      - terraform-formatter
      - regula-lint
      - pytest
  run-create-and-destroy-azure:
    when: << pipeline.parameters.run-create-and-destroy-azure >>
    jobs:
      - build-test-service-image
      - build-opta-binary:
          requires:
            - build-test-service-image
      - azure-create-env:
          requires:
            - build-opta-binary
      - azure-test-service-http:
          requires:
            - azure-create-env
      - azure-destroy-env:
          requires:
            - azure-test-service-http

  run-destroy-gcp-env:
    when: << pipeline.parameters.run-destroy-gcp-env >>
    jobs:
      - get-all-parameter-values
      - build-opta-binary
      - gcp-destroy-env:
          requires:
            - build-opta-binary

  run-destroy-aws-env:
    when: << pipeline.parameters.run-destroy-aws-env >>
    jobs:
      - get-all-parameter-values
      - build-opta-binary
      - aws-destroy-env:
          requires:
            - build-opta-binary

  run-destroy-all-envs:
    when: << pipeline.parameters.run-destroy-all-envs >>
    jobs:
      - get-all-parameter-values
      - build-opta-binary
      - gcp-destroy-env:
          requires:
            - build-opta-binary
      - aws-destroy-env:
          requires:
            - build-opta-binary

  run-create-destroy-local-example:
    when: << pipeline.parameters.run-create-destroy-local >>
    jobs:
      - get-all-parameter-values
      - build-opta-binary
      - build-opta-example-images
      - local-opta-example-create-svcs:
          requires:
            - build-opta-binary
            - build-opta-example-images
      - local-opta-example-destroy-svcs:
          requires:
            - local-opta-example-create-svcs

  run-aws-lambda:
    when: << pipeline.parameters.test-aws-lambda >>
    jobs:
      - get-all-parameter-values
      - build-opta-binary
      - aws-create-env:
          requires:
            - build-opta-binary
      - aws-test-lambda-function:
          requires:
            - aws-create-env
      - aws-destroy-env:
          requires:
            - aws-test-lambda-function

  run-service-mesh-e2e:
    when: << pipeline.parameters.run-service-mesh-e2e >>
    jobs:
      - get-all-parameter-values
      - build-opta-binary
      - build-opta-example-images
      - aws-create-env:
          requires:
            - build-opta-binary
      - gcp-create-env:
          requires:
            - build-opta-binary
      - aws-opta-example-create-svcs:
          requires:
            - aws-create-env
            - build-opta-example-images
      - aws-opta-example-destroy-svcs:
          requires:
            - aws-opta-example-create-svcs
      - aws-destroy-env:
          requires:
            - aws-opta-example-destroy-svcs
      - gcp-opta-example-create-svcs:
          requires:
            - gcp-create-env
            - build-opta-example-images
      - gcp-opta-example-destroy-svcs:
          requires:
            - gcp-opta-example-create-svcs
      - gcp-destroy-env:
          requires:
            - gcp-opta-example-destroy-svcs

  run-release-vs-stable:
    when: << pipeline.parameters.run-release-vs-stable >>
    jobs:
      - get-all-parameter-values
      - build-opta-binary
      - build-test-service-image
      - download-opta
      - check-version:
          requires:
            - download-opta
      - aws-create-env-stable-version:
          requires:
            - download-opta
            - check-version
      - aws-create-env:
          requires:
            - build-opta-binary
            - aws-create-env-stable-version
      - aws-test-websocket-stable-version:
          requires:
            - aws-create-env-stable-version
            - aws-create-env
      - aws-test-websocket:
          requires:
            - aws-test-websocket-stable-version
      - aws-destroy-env:
          requires:
            - aws-test-websocket
            - build-opta-binary
      - gcp-create-env-stable-version:
          requires:
            - download-opta
            - check-version
      - gcp-create-env:
          requires:
            - build-opta-binary
            - gcp-create-env-stable-version
      - gcp-test-service-pg-latest-version:
          requires:
            - gcp-create-env-stable-version
            - gcp-create-env
            - build-test-service-image
      - gcp-test-service-pg:
          requires:
            - gcp-test-service-pg-latest-version
      - gcp-destroy-env:
          requires:
            - gcp-test-service-pg

  run-aws-dns:
    when: << pipeline.parameters.test-aws-dns >>
    jobs:
      - get-all-parameter-values
      - build-opta-binary
      - aws-create-env-dns-false:
          requires:
            - build-opta-binary
      - aws-create-env-set-ns:
          requires:
            - aws-create-env-dns-false
      - aws-create-env-dns-true:
          requires:
            - aws-create-env-set-ns
      - aws-dns-test:
          requires:
            - aws-create-env-dns-true
      - aws-destroy-env-dns-true:
          requires:
            - aws-dns-test

  run-destroy-aws-dns-false:
    when: << pipeline.parameters.run-destroy-aws-dns-false >>
    jobs:
      - get-all-parameter-values
      - build-opta-binary
      - aws-destroy-env-dns-false:
          requires:
            - build-opta-binary

  run-destroy-aws-dns-true:
    when: << pipeline.parameters.run-destroy-aws-dns-true >>
    jobs:
      - get-all-parameter-values
      - build-opta-binary
      - aws-destroy-env-dns-true:
          requires:
            - build-opta-binary

  run-opta-terraform-generate-test:
    when: << pipeline.parameters.run-opta-terraform-generate-test >>
    jobs:
      - get-all-parameter-values
      - build-opta-binary
      - aws-generate-terraform-language-files:
          requires:
            - build-opta-binary
      - aws-tg-create-env:
          requires:
            - aws-generate-terraform-language-files
      - aws-tg-test-service-http:
          requires:
            - aws-tg-create-env
      - aws-tg-test-other-modules-plan:
          requires:
            - aws-tg-create-env
      - aws-tg-destroy-env:
          requires:
            - aws-tg-test-service-http
            - aws-tg-test-other-modules-plan
      - gcp-generate-terraform-language-files:
          requires:
            - build-opta-binary
      - gcp-tg-create-env:
          requires:
            - gcp-generate-terraform-language-files
      - gcp-tg-test-service-http:
          requires:
            - gcp-tg-create-env
      - gcp-tg-test-other-modules-plan:
          requires:
            - gcp-tg-create-env
      - gcp-tg-destroy-env:
          requires:
            - gcp-tg-test-service-http
            - gcp-tg-test-other-modules-plan

  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - main
    jobs: *fullsuite
