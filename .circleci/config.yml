# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  # A parameter per package
  run-create-and-destroy:
    type: boolean
    default: false
  run-aws-create-and-destroy:
    type: boolean
    default: false
  run-gcp-create-and-destroy:
    type: boolean
    default: false


orbs:
  terraform: circleci/terraform@3.0.0
  codecov: codecov/codecov@3.1.1

executors:
  ubuntu_machine:
    machine:
      image: ubuntu-2004:202111-01
  python-docker:
    docker:
      - image: cimg/python:3.8

commands:
  install-python:
    steps:
      - run:
          name: "Installing python version 3.8"
          command: |
            pyenv install 3.8.0
            pyenv global 3.8.0
  install-python-dependencies:
    steps:
      - run:
          name: "Install python dependencies"
          command: |
            pip install pipenv
            pipenv install --deploy --dev
            source $(pipenv --venv)/bin/activate

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  no-pdb:
    executor: ubuntu_machine
    steps:
      - checkout
      - run:
          name: "No PDB"
          command: |
            cd scripts
            ./no_pdb.sh
  lint:
    executor: python-docker
    steps:
      - checkout
      - install-python-dependencies
      - run:
          name: "Lint"
          command: |
            source $(pipenv --venv)/bin/activate
            export PYTHONPATH=$(pwd)
            ./scripts/lint.py

  regula-lint:
    executor: ubuntu_machine
    steps:
      - checkout
      - run:
          name: "Install regula"
          command: |
            cd config
            wget -O regula_1.0.0_Linux_x86_64.tar.gz https://github.com/fugue/regula/releases/download/v1.0.0/regula_1.0.0_Linux_x86_64.tar.gz
            tar -xvf regula_1.0.0_Linux_x86_64.tar.gz
      - run:
          name: "Run regula"
          command: |
            cd config
            ./regula run --include config.rego tf_modules

  python-security:
    executor: python-docker
    steps:
      - checkout
      - install-python-dependencies
      - run:
          name: "Security"
          command: "make security_tests"

  pytest:
    executor: python-docker
    steps:
      - checkout
      - install-python-dependencies
      - run:
          name: "Test with pytest"
          command: |
            export PYTHONPATH=$(pwd)
            pipenv run pytest --cov=./opta --cov-report=xml
      - codecov/upload:
          flags: unittests
          file: ./coverage.xml

  terraform-formatter:
    executor: ubuntu_machine
    steps:
      - checkout
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.0.0
      - run:
          name: "Run terraform format"
          command: "terraform fmt -recursive -check ./config/tf_modules"

  run-aws-create-and-destroy:
    executor: ubuntu_machine
    steps:
      - checkout
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 0.14.2
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  run-gcp-create-and-destroy:
    executor: ubuntu_machine
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  say-hello:
    executor: ubuntu_machine
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  version: 2
  run-create-and-destroy:
    when: << pipeline.parameters.run-create-and-destroy >>
    jobs:
      - run-aws-create-and-destroy
      - run-gcp-create-and-destroy

  run-aws-create-and-destroy:
    when: << pipeline.parameters.run-aws-create-and-destroy >>
    jobs:
      - run-aws-create-and-destroy

  run-gcp-create-and-destroy:
    when: << pipeline.parameters.run-gcp-create-and-destroy >>
    jobs:
      - run-gcp-create-and-destroy

  run-ci:
    jobs:
      - say-hello
      - no-pdb
      - lint
      - python-security
      - terraform-formatter
      - regula-lint
      - pytest

  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - run-aws-create-and-destroy
      - run-gcp-create-and-destroy