{{- if .Values.httpPort }}
{{ $old_ingress_convention := false }}
{{ $ingress_base_name := include "k8s-service.fullname" $ }}
{{ $namespace_name := include "k8s-service.namespaceName" $ }}
{{ $ingress_name_old_convention := "" }}
{{ $ingress_name_new_convention := "" }}
{{ $domain_pathPrefix := "" }}
{{ $domain_pathPrefix_sha256 := "" }}
{{- range $index, $val := .Values.uriComponents }}
{{ $ingress_name_old_convention = print $ingress_base_name "-" $index }}
{{ $domain_pathPrefix = print $val.domain "-" $val.pathPrefixName }}
{{ $domain_pathPrefix_sha256 = trunc 8 (sha256sum $domain_pathPrefix) }}
{{ $ingress_name_new_convention = print $ingress_base_name "-" $domain_pathPrefix_sha256 }}

{{ if $.Capabilities.APIVersions.Has "networking.k8s.io/v1beta1/Ingress" }}
{{ $old_ingress_convention = (lookup "networking.k8s.io/v1beta1" "Ingress" $namespace_name $ingress_name_old_convention) }}
{{ end }}  

{{- if $.Capabilities.APIVersions.Has "networking.k8s.io/v1/Ingress" }}
apiVersion: networking.k8s.io/v1
{{- else if $.Capabilities.APIVersions.Has "networking.k8s.io/v1beta1/Ingress" }}
apiVersion: networking.k8s.io/v1beta1
{{ end }}  
kind: Ingress
metadata:
  {{- if $old_ingress_convention }}
  name:  {{ $ingress_name_old_convention }}
  {{- end }}
  {{- if not $old_ingress_convention }}
  name:  {{ $ingress_name_new_convention }}
  {{- end }}
  namespace: {{ include "k8s-service.namespaceName" $ }}
  labels:
    {{- include "k8s-service.labels" $ | nindent 4 }}
  annotations:
    {{- if $.Values.stickySession }}
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "opta-cookie"
    nginx.ingress.kubernetes.io/session-cookie-expires: {{ $.Values.stickySessionMaxAge | quote }}
    nginx.ingress.kubernetes.io/session-cookie-max-age: {{ $.Values.stickySessionMaxAge | quote }}
    {{- end }}
    {{- if $.Values.consistentHash }}
    nginx.ingress.kubernetes.io/upstream-hash-by: {{ $.Values.consistentHash }}
    {{- end }}
    {{- if and ( ne $val.pathPrefix "/") (not $.Values.keepPathPrefix) }}
    nginx.ingress.kubernetes.io/rewrite-target: "/$2"
    {{- end }}
    {{- if and ( ne $val.pathPrefix "/") $.Values.keepPathPrefix }}
    nginx.ingress.kubernetes.io/rewrite-target: "{{ $val.pathPrefix }}$1$2"
    {{- end }}
    {{ if eq (default "http" $.Values.httpPort.protocol) "grpc" }}
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    {{- end }}
    cert-manager.io/cluster-issuer: opta-selfsigned
    kubernetes.io/ingress.class: "nginx"
{{- /*
These headers will instruct Linkerd what service the request is destined for
https://linkerd.io/2.9/tasks/using-ingress/#nginx
*/}}
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
      grpc_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
    {{/* For websockets */}}
    {{ if eq (default "http" $.Values.httpPort.protocol) "websocket" }}
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    {{- end }}
    {{- range $k, $v := $.Values.ingressExtraAnnotations }}
    {{ $k | quote }}: {{ $v | quote }}
    {{- end }}
spec:
  rules:
    - {{ if not (eq $val.domain "all" ) }}
      host: {{ $val.domain }}
      {{ end }}
      http:
        paths:
          - path: {{ $val.pathPrefix }}{{ if not (eq $val.pathPrefix "/") }}(/|$)(.*){{ end }}
            {{- if $.Capabilities.APIVersions.Has "networking.k8s.io/v1/Ingress" }}
            pathType: Prefix
            backend:
              service:
                name: {{ include "k8s-service.serviceName" $ }}
                port: 
                  name: {{ $.Values.httpPort.name | quote }}
            {{- else if $.Capabilities.APIVersions.Has "networking.k8s.io/v1beta1/Ingress" }}
            backend:
              serviceName: {{ include "k8s-service.serviceName" $ }}
              servicePort: {{ $.Values.httpPort.name | quote }}
            {{- end }}
---
{{- end }}
{{- end }}
