halt: false
environment_module: false
is_unique: true
inputs:
  - name: env_name
    user_facing: false
    description: Opta Environment name
    default: None
  - name: layer_name
    user_facing: false
    description: Opta Layer name
    default: None
  - name: module_name
    user_facing: false
    description: Opta Module name
    default: None
  - name: openid_provider_url
    user_facing: false
    description: The url for the open id for the eks cluster
    default: null
  - name: openid_provider_arn
    user_facing: false
    description: The arn for the open id for the eks cluster.
    default: false
  - name: tag
    user_facing: false
    description: "Tag of image to be deployed"
    default: null
  - name: digest
    user_facing: false
    description: "Digest of image to be deployed"
    default: null
  - name: link_secrets
    user_facing: false
    description: "Secrets from links"
    default: []
  - name: iam_policy
    user_facing: false
    description: "The IAM policy created for this service"
    default: null
  - name: image
    user_facing: true
    validator: str(required=True)
    description: Set to AUTO to create a private repo for your own images. Otherwises attempts to pull image from public dockerhub
    default: AUTO
  - name: port
    user_facing: true
    validator: any(include('service_port'), required=False)
    # TODO(patrick): In description, mention deprecation
    description: |
      Specifies what port your app was made to be listened to. Currently it must be a map of the form
      `http: [PORT_NUMBER_HERE]` or `websocket: [PORT_NUMBER_HERE]`. Use `http` if you just have a vanilla http server
      and `websocket` for websockets.
  - name: ports
    user_facing: true
    validator: list(include('port_definition'), required=False)
    description: Specifies which port(s) your app exposes.
  - name: probe_port
    user_facing: true
    validator: str(required=False)
    description: The name of the port to use for readiness and liveness probes. Defaults to the first port listed.
  - name: http_port
    user_facing: false
  - name: service_annotations
    user_facing: false
  - name: min_containers
    user_facing: true
    validator: any(required=False)
    description: The minimum number of replicas your app can autoscale to.
    default: 1
  - name: max_containers
    user_facing: true
    validator: any(required=False)
    description: The maximum number of replicas your app can autoscale to.
    default: 3
  - name: autoscaling_target_cpu_percentage
    user_facing: true
    validator: any(str(), int(), required=False)
    description: See the [autoscaling](https://docs.opta.dev/reference/aws/modules/aws-k8s-service/#autoscaling) section.
    default: 80
  - name: autoscaling_target_mem_percentage
    user_facing: true
    validator: any(str(), int(), required=False)
    description: See the [autoscaling](https://docs.opta.dev/reference/aws/modules/aws-k8s-service/#autoscaling) section.
    default: 80
  - name: secrets
    user_facing: true
    validator: list(str(), required=False)
    description: Deprecated, see [secrets instructions](/features/secrets).
    default: []
  - name: env_vars
    user_facing: true
    validator: any(list(include('env-var')), map(str(), str()), required=False)
    description: |
      A map of key values to add to the container as environment variables (key is name, value is value).
      ```yaml
      env_vars:
       FLAG: "true"
      ```
    default: []
  - name: healthcheck_path
    user_facing: true
    validator: str(required=False)
    description: See the See the [healthcheck probe](https://docs.opta.dev/reference/aws/modules/aws-k8s-service/#healthcheck-probe) section. Default `null` (i.e., no user-specified healthchecks)
    default: null
  - name: healthcheck_command
    user_facing: true
    validator: list(str(), required=False)
    description: See the See the [healthcheck probe](https://docs.opta.dev/reference/aws/modules/aws-k8s-service/#healthcheck-probe) section. Default `[]` (i.e., no user-specified healthchecks)
    default: []
  - name: liveness_probe_command
    user_facing: true
    validator: list(str(), required=False)
    description: Use if using shell command liveness checks and liveness probe != readiness probe
    default: []
  - name: readiness_probe_command
    user_facing: true
    validator: list(str(), required=False)
    description: Use if using shell command readiness checks and liveness probe != readiness probe
    default: []
  - name: liveness_probe_path
    user_facing: true
    validator: str(required=False)
    description: Use if using http ping liveness checks and liveness probe != readiness probe
    default: null
  - name: readiness_probe_path
    user_facing: true
    validator: str(required=False)
    description: Use if using http ping readiness checks and liveness probe != readiness probe
    default: null
  - name: initial_liveness_delay
    user_facing: true
    validator: int(required=False)
    description: Use if the initial delay needs to be changed.
    default: 30
  - name: initial_readiness_delay
    user_facing: true
    validator: int(required=False)
    description: Use if the initial delay needs to be changed.
    default: 30
  - name: consistent_hash
    user_facing: true
    validator: str(required=False)
    description: Use [consistent hashing](https://www.nginx.com/resources/wiki/modules/consistent_hash/)
    default: null
  - name: sticky_session
    user_facing: true
    validator: bool(required=False)
    description: Use [sticky sessions](https://stackoverflow.com/questions/10494431/sticky-and-non-sticky-sessions) via cookies for your service (first request will send you a cookie called opta_cookie which you should add on future requests).
    default: false
  - name: sticky_session_max_age
    user_facing: true
    validator: int(required=False)
    description: If the sticky session is enabled, how long should the cookie last?
    default: 86400
  - name: resource_request
    user_facing: true
    validator: any(include('resources'), required=False)
    description: |
      See the [container resources](https://docs.opta.dev/reference/aws/modules/aws-k8s-service/#resource-requests) section.
      CPU is given in millicores, and Memory is in megabytes.
    default:
      cpu: 100
      memory: 128
  - name: resource_limits
    user_facing: true
    validator: any(include('limits'), required=False)
    description: |
      See the [container resources]({{< relref "#resource-requests" >}}) section.
      Memory is in megabytes..
    default: null
  - name: public_uri
    user_facing: true
    validator: any(str(), list(), required=False)
    description: |
      The full domain to expose your app under as well as path prefix. Must be the full parent domain or a subdomain referencing the parent as such: "dummy.{parent[domain]}/my/path/prefix"
    default: []
  - name: keep_path_prefix
    user_facing: true
    validator: bool(required=False)
    description: Should we keep the prefix path which you set in the public uri when forwarding requests to your service?
    default: false
  - name: additional_iam_policies
    user_facing: true
    validator: any(required=False)
    description: A list of extra IAM role policies not captured by Opta which you wish to give to your service.
    default: []
  - name: links
    user_facing: true
    validator: list(any(str(), map()), required=False)
    description: A list of extra IAM role policies not captured by Opta which you wish to give to your service.
    default: []
  - name: persistent_storage
    user_facing: true
    validator: list(include('persistent_storage'), required=False)
    description: |
      A list persistent storages to add to each instance of your service (need to give a `size` which is the size in GB
      for the storage volume to be, and `path` which is the path in the filesystem of each instance to place it under)
    default: []
  - name: ingress_extra_annotations
    user_facing: true
    validator: map(required=False)
    default: {}
    description: |
      These are extra annotations to add to ingress objects
  - name: tolerations
    user_facing: true
    validator: list(include('toleration'), required=False)
    description: Taint tolerations to add to the pods.
    default: []
  - name: cron_jobs
    user_facing: true
    validator: list(include('cron_job'), required=False)
    description: A list of cronjobs to execute as part of this service
    default: []
  - name: pod_annotations
    user_facing: true
    validator: map(required=False)
    default: {}
    description: |
      These are extra annotations to add to k8s-service pod objects / replace defaults
  - name: pod_labels
    user_facing: true
    validator: map(required=False)
    default: {}
    description: |
      These are extra labels to add to k8s-service pod objects / replace defaults
  - name: timeout
    user_facing: true
    validator: int(required=False)
    description: Time in seconds to wait for deployment.
    default: 300
  - name: max_history
    user_facing: true
    validator: int(required=False)
    description: The max amount of helm revisions to keep track of (0 for infinite)
    default: 25
  - name: commands
    user_facing: true
    validator: list(required=False)
    description: The commands override to execute in your container (corresponds to EntryPoint in docker)
    default: []
  - name: args
    user_facing: true
    validator: list(required=False)
    description: The args override to pass to your container (corresponds to Cmd in docker)
    default: []
extra_validators:
  limits:
    memory: any(int(min=1), str(), required=True)
  resources:
    cpu: any(int(min=1), str(), required=True)
    memory: any(int(min=1), str(), required=True)
  cron_job:
    commands: list(required=True)
    args: list(required=False)
    schedule: str(required=True)
  toleration:
    key: str(required=True)
    value: str(required=False)
    effect: enum("NoSchedule", "PreferNoSchedule", "NoExecute", required=False)
  persistent_storage:
    size: int(required=True)
    path: str(required=True)
  env-var:
    name: str(required=False)
    value: str()
  port_definition:
    name: regex('^[a-z0-9-]+$', name='valid service name')
    type: regex('^(http|tcp)$', name='http or tcp')
    port: any(int(min=1, max=65535), regex('^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'), required=False)
    service_port: any(int(min=1, max=65535), regex('^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'), required=False)
    protocol: regex('^(grpc|websocket)$', name='grpc or websocket', required=False)
  service_port:
    http: any(int(min=1, max=65535), regex('^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'), required=False)
    tcp: any(int(min=1, max=65535), regex('^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'), required=False)
    grpc: any(int(min=1, max=65535), regex('^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'), required=False)
    websocket: any(int(min=1, max=65535), regex('^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'), required=False)
outputs:
  - name: docker_repo_url
    export: true
    description: The url of the docker repo created to host this app's images in this environment. Does not exist when using external images.
  - name: current_image
    export: true
    description: The full name of the docker image used by the deployment.
  - name: current_tag
    export: true
    description: The tag of the docker image used by the deployment ("" if not using tags).
  - name: current_digest
    export: true
    description: The digest of the docker image used by the deployment ("" if not using digests).
output_providers: {}
output_data: {}
clouds:
  - aws
