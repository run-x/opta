# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install python dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Lint
        run: ./scripts/lint.py
  python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Test with pytest
        run: |
          pipenv run pytest --cov=./opta --cov-report=xml
        env:
          PYTHONPATH: $(pwd)

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.RUNXC_CODECOV_TOKEN }}
          files: ./coverage.xml
          directory: ./coverage/reports/
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true

  test_cli:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Checkout runx-infra repo
        uses: actions/checkout@v2
        with:
          repository: "run-x/runx-infra"
          path: "runx-infra"
          ssh-key: ${{ secrets.SSH_KEY }}
      - name: Checkout test-service repo
        uses: actions/checkout@v2
        with:
          repository: "run-x/test-service"
          path: "test-service"
          ssh-key: ${{ secrets.SSH_KEY }}
      - name: Setup ssh
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy opta environment
        run: |
          source $(pipenv --venv)/bin/activate
          export PYTHONPATH=$(pwd)
          python ./opta/cli.py apply \
          --config runx-infra/staging/opta.yml \
          --auto-approve
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build test-service image
        run: docker build -t app:latest -f Dockerfile test-service/
      - name: Deploy test-service
        run: |
          source $(pipenv --venv)/bin/activate
          export PYTHONPATH=$(pwd)
          python ./opta/cli.py deploy \
          --image app:latest \
          --env runx-staging \
          --config test-service/opta.yml \
          --tag ${{ github.sha }} \
          --auto-approve

  deploy_test_service:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy test-service
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.ALL_GITHUB_TOKEN }}
          repository: run-x/test-service
          # The test-service's workflow listens to this
          # event and triggers a new deploy with opta.
          event-type: runxc-updated
