# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install python dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Lint
        run: ./scripts/lint.py
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install python dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Security
        run: make security_tests
  python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Test with pytest
        run: |
          pipenv run pytest --cov=./opta --cov-report=xml
        env:
          PYTHONPATH: $(pwd)

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.RUNXC_CODECOV_TOKEN }}
          files: ./coverage.xml
          directory: ./coverage/reports/
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true

  test_cli:
    if: ${{ github.event.pull_request.head.repo.full_name == 'run-x/opta' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Checkout test-service repo
        uses: actions/checkout@v2
        with:
          repository: "run-x/test-service"
          path: "test-service"
          ssh-key: ${{ secrets.SSH_KEY }}
      - name: Setup ssh
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Test output command
        run: |
          source $(pipenv --venv)/bin/activate
          export PYTHONPATH=$(pwd)
          cd test-service
          python ../opta/cli.py output --env staging
      - name: Test apply command
        run: |
          source $(pipenv --venv)/bin/activate
          export PYTHONPATH=$(pwd)
          cd test-service
          terraform version
          python ../opta/cli.py apply --env staging --test
      - name: Configure GCP credentials
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@v0.2.1
        with:
          service_account_key: ${{ secrets.CI_GKE_SA_KEY }}
          project_id: gcpoptatest123
          export_default_credentials: true
      - name: Test output command
        run: |
          source $(pipenv --venv)/bin/activate
          export PYTHONPATH=$(pwd)
          cd test-service
          python ../opta/cli.py output --config opta-gcp.yml --env staging
      - name: Test apply command
        run: |
          source $(pipenv --venv)/bin/activate
          export PYTHONPATH=$(pwd)
          cd test-service
          python ../opta/cli.py apply --config opta-gcp.yml --env staging --test

  deploy_test_service:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: test_cli
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Deploy the AWS and GCP test-service and wait for success
        run: ./scripts/dispatch_workflow.sh test-service cicd.yml
        env:
          github_token: ${{ secrets.ALL_GITHUB_TOKEN }}
