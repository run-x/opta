# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  no-pdb:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: No PDB
        run: |
          cd scripts
          ./no_pdb.sh
  shell-check:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Install shellcheck
        run: |
          sudo apt update
          sudo apt install shellcheck
      - name: Lint
        run: |
          shellcheck **/*.sh
  shell-fmt:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.18' # The Go version to download (if necessary) and use.
      - name: Install shell fmt
        run: |
          go install mvdan.cc/sh/v3/cmd/shfmt@latest
      - name: Lint
        run: |
          shfmt -d ./
  python-lint:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install python dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Lint
        run: |
          source $(pipenv --venv)/bin/activate
          export PYTHONPATH=$(pwd)
          ./scripts/lint.py

  security:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install python dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Security
        run: make security_tests
  terraform_format:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false
      - name: Run terraform format
        run: |
          terraform version
          terraform fmt -recursive -check ./modules

  python:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Test with pytest
        run: |
          pipenv run pytest --cov=./opta --cov=./modules --cov-report=xml
        env:
          PYTHONPATH: $(pwd)

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.RUNXC_CODECOV_TOKEN }}
          files: ./coverage.xml
          directory: ./coverage/reports/
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true
