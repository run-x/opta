name: Nightly Create and Destroy
on:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC

jobs:
  create-destroy-tests-aws:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          ref: dev
      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false
      - name: Create and destroy test-service and opta environment
        run: ./scripts/dispatch_workflow.sh opta create-and-destroy-aws.yml dev
        env:
          github_token: ${{ secrets.ALL_GITHUB_TOKEN }}
      # - name: Slack alert if failed.
      #   if: ${{ failure() }}
      #   run: echo "TODO, send slack alert to notify failure"

  create-destroy-tests-gcp:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false
      - name: Create and destroy test-service and opta environment
        run: ./scripts/dispatch_workflow.sh opta create-and-destroy-gcp.yml dev
        env:
          github_token: ${{ secrets.ALL_GITHUB_TOKEN }}
      # - name: Slack alert if failed.
      #   if: ${{ failure() }}
      #   run: echo "TODO, send slack alert to notify failure"

  create-destroy-tests-azure:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false
      - name: Create and destroy test-service and opta environment
        run: ./scripts/dispatch_workflow.sh opta create-and-destroy-azure.yml dev
        env:
          github_token: ${{ secrets.ALL_GITHUB_TOKEN }}
      # - name: Slack alert if failed.
      #   if: ${{ failure() }}
      #   run: echo "TODO, send slack alert to notify failure"

  todo-example-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Opta Repository
        uses: actions/checkout@v2

      - name: Checkout Opta Examples Repository
        uses: actions/checkout@v2
        with:
          repository: run-x/opta-examples
          path: "opta-examples"
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false

      - name: Limit concurrency to 1.
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ALL_GITHUB_TOKEN }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_OPTA_CI_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_OPTA_CI_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate

      - name: Build Release Binary
        run: |
          source $(pipenv --venv)/bin/activate
          export PYTHONPATH=$(pwd)
          make build-binary

      - name: Build Dockers for API and FrontEnd service
        run: |
          docker build opta-examples/full-stack-example/api/todo-python-django/ --tag todo-api:v1
          docker build opta-examples/full-stack-example/frontend/todo-vuejs --tag todo-frontend:v1

      - name: Create Test Enrironment using Release build
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
          --config ./examples/ci-tests/todo-list/provider.yml \
          --auto-approve \
          --refresh

      - name: Create Test API Service using Release build
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta deploy \
          --image todo-api:v1 \
          --config ./examples/ci-tests/todo-list/api-service.yml \
          --auto-approve

      - name: Create Test Front End Service using Release build
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta deploy \
          --image todo-frontend:v1 \
          --config ./examples/ci-tests/todo-list/frontend-service.yml \
          --auto-approve

      - name: Create Test Prometheus Service using Release build
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
          --config ./examples/ci-tests/todo-list/monitoring-service.yml \
          --auto-approve

      - name: Destroy Test Prometheus Service using Release build
        run: |
          yes | OPTA_DISABLE_REPORTING=true ./dist/opta/opta destroy \
          --config ./examples/ci-tests/todo-list/monitoring-service.yml \
          --auto-approve

      - name: Destroy Test Front End Service using Release build
        run: |
          yes | OPTA_DISABLE_REPORTING=true ./dist/opta/opta destroy \
          --config ./examples/ci-tests/todo-list/frontend-service.yml \
          --auto-approve

      - name: Destroy Test API Service using Release build
        run: |
          yes | OPTA_DISABLE_REPORTING=true ./dist/opta/opta destroy \
          --config ./examples/ci-tests/todo-list/api-service.yml \
          --auto-approve

      - name: Destroy Test Enrironment using Release build
        run: |
          yes | OPTA_DISABLE_REPORTING=true ./dist/opta/opta destroy \
          --config ./examples/ci-tests/todo-list/provider.yml \
          --auto-approve

  additional-aws-nodegroup:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Opta Repository
        uses: actions/checkout@v2

      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false

      - name: Limit concurrency to 1.
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ALL_GITHUB_TOKEN }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_OPTA_CI_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_OPTA_CI_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Build Release Binary
        run: |
          source $(pipenv --venv)/bin/activate
          export PYTHONPATH=$(pwd)
          make build-binary
      - name: Create Test Enrironment with no Additional Nodegroup
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
          --config ./examples/ci-tests/aws-nodegroup/aws-nodegroup-state1.yml \
          --auto-approve \
          --refresh
      - name: Update Test Environment to have Additional Nodegroup
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
          --config ./examples/ci-tests/aws-nodegroup/aws-nodegroup-state2.yml \
          --auto-approve \
          --refresh
      - name: Update Test Environment to remove Additional Nodegroup
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
          --config ./examples/ci-tests/aws-nodegroup/aws-nodegroup-state1.yml \
          --auto-approve \
          --refresh
      - name: Destroy Test Enrironment
        run: |
          yes | OPTA_DISABLE_REPORTING=true ./dist/opta/opta destroy \
          --config ./examples/ci-tests/aws-nodegroup/aws-nodegroup-state1.yml \
          --auto-approve

  additional-gcp-nodepool:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Opta Repository
        uses: actions/checkout@v2

      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false

      - name: Limit concurrency to 1.
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ALL_GITHUB_TOKEN }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Configure GCP credentials
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.CI_GKE_SA_KEY }}
          project_id: opta-ci-1
          export_default_credentials: true

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Build Release Binary
        run: |
          source $(pipenv --venv)/bin/activate
          export PYTHONPATH=$(pwd)
          make build-binary
      - name: Create Test Enrironment with no Additional Nodepool
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
          --config ./examples/ci-tests/gcp-nodepool/gcp-nodepool-state1.yml \
          --auto-approve \
          --refresh
      - name: Update Test Environment to have Additional Nodepool
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
          --config ./examples/ci-tests/gcp-nodepool/gcp-nodepool-state2.yml \
          --auto-approve \
          --refresh
      - name: Update Test Environment to remove Additional Nodepool
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
          --config ./examples/ci-tests/gcp-nodepool/gcp-nodepool-state1.yml \
          --auto-approve \
          --refresh
      - name: Destroy Test Enrironment
        run: |
          yes | OPTA_DISABLE_REPORTING=true ./dist/opta/opta destroy \
          --config ./examples/ci-tests/gcp-nodepool/gcp-nodepool-state1.yml \
          --auto-approve

  ci-test-db:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Opta Repository
        uses: actions/checkout@v2

      - name: Checkout test-service repo
        uses: actions/checkout@v2
        with:
          repository: "run-x/test-service"
          path: "test-service"
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false

      - name: Limit concurrency to 1.
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ALL_GITHUB_TOKEN }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_OPTA_CI_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_OPTA_CI_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Build Release Binary
        run: |
          source $(pipenv --venv)/bin/activate
          export PYTHONPATH=$(pwd)
          make build-binary
      - name: Build test-service image
        run: docker build -t app:latest -f test-service/Dockerfile test-service/

      - name: Create Test Enrironment
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
          --config ./examples/ci-tests/db-editions/provider.yml \
          --auto-approve \
          --refresh
      - name: Set secret
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta secret update \
          --env ci \
          --config ./examples/ci-tests/db-editions/service-all-dbs.yml \
          FAKE_SECRET foo
      - name: Deploy Test Service with All DBs
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta deploy \
          --image app:latest \
          --env ci \
          --config ./examples/ci-tests/db-editions/service-all-dbs.yml \
          --tag ${{ github.sha }} \
          --auto-approve
      - name: Deploy Test Service with No DBs
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta deploy \
          --image app:latest \
          --env ci \
          --config ./examples/ci-tests/db-editions/service-no-db.yml \
          --tag ${{ github.sha }} \
          --auto-approve
      - name: Deploy Test Service with Redis
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta deploy \
          --image app:latest \
          --env ci \
          --config ./examples/ci-tests/db-editions/service-redis-db.yml \
          --tag ${{ github.sha }} \
          --auto-approve
      - name: Deploy Test Service with PG
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta deploy \
          --image app:latest \
          --env ci \
          --config ./examples/ci-tests/db-editions/service-pg-db.yml \
          --tag ${{ github.sha }} \
          --auto-approve
      - name: Deploy Test Service with DocumentDB
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta deploy \
          --image app:latest \
          --env ci \
          --config ./examples/ci-tests/db-editions/service-docdb-db.yml \
          --tag ${{ github.sha }} \
          --auto-approve
      - name: Deploy Test Service with All DBs
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta deploy \
          --image app:latest \
          --env ci \
          --config ./examples/ci-tests/db-editions/service-all-dbs.yml \
          --tag ${{ github.sha }} \
          --auto-approve
      - name: Destroy Test Service
        run: |
          yes | OPTA_DISABLE_REPORTING=true ./dist/opta/opta destroy \
          --env ci \
          --config ./examples/ci-tests/db-editions/service-all-dbs.yml \
          --auto-approve
      - name: Destroy Test Service
        run: |
          yes | OPTA_DISABLE_REPORTING=true ./dist/opta/opta destroy \
          --config ./examples/ci-tests/db-editions/provider.yml \
          --auto-approve
      - name: Start SSH via Ngrok
        if: ${{ failure() }}
        run: curl -sL https://gist.githubusercontent.com/juandiegopalomino/c9a3fb7f84eb6132023b1b1bc16dead7/raw/1da0059df274b82eb4c27d5ca444523fd7500a77/debug-github-actions.sh | bash
        env:
          # After sign up on the https://ngrok.com/
          # You can find this token here: https://dashboard.ngrok.com/get-started/setup
          NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}

          # This password you will use when authorizing via SSH
          USER_PASS: ${{ secrets.DEBUG_SSH_PASS }}

      - name: Don't kill instace
        if: ${{ failure() }}
        run: sleep 1h # Prevent to killing instance after failure