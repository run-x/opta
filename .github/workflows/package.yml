name: Package

on: 
  release:
    types: [published]

jobs:
  create-destroy-tests-aws:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false
      - name: Create and destroy test-service and opta environment
        run: ./scripts/dispatch_workflow.sh opta create-and-destroy-aws.yml
        env:
          github_token: ${{ secrets.ALL_GITHUB_TOKEN }}
      # - name: Slack alert if failed.
      #   if: ${{ failure() }}
      #   run: echo "TODO, send slack alert to notify failure"

  create-destroy-tests-gcp:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false
      - name: Create and destroy test-service and opta environment
        run: ./scripts/dispatch_workflow.sh opta create-and-destroy-gcp.yml
        env:
          github_token: ${{ secrets.ALL_GITHUB_TOKEN }}
      # - name: Slack alert if failed.
      #   if: ${{ failure() }}
      #   run: echo "TODO, send slack alert to notify failure"

  create-destroy-tests-azure:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false
      - name: Create and destroy test-service and opta environment
        run: ./scripts/dispatch_workflow.sh opta create-and-destroy-azure.yml
        env:
          github_token: ${{ secrets.ALL_GITHUB_TOKEN }}
      # - name: Slack alert if failed.
      #   if: ${{ failure() }}
      #   run: echo "TODO, send slack alert to notify failure"

  package-linux:
    # needs: create-destroy-tests
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install python dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Package
        run: |
          export VERSION=$(echo "$GITHUB_REF" | sed 's|refs/tags/||')
          make build-binary
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Upload to S3
        run: |
          VERSION=$(echo "$GITHUB_REF" | sed 's|refs/tags/v||')
          cd dist/opta
          zip -r opta.zip ./*
          aws s3 cp opta.zip s3://dev-runx-opta-binaries/linux/$VERSION/ --acl public-read

  package-macos:
    # needs: create-destroy-tests
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install python dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate
      - name: Package
        run: |
          export VERSION=$(echo "$GITHUB_REF" | sed 's|refs/tags/||')
          make build-binary
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Upload to S3
        run: |
          VERSION=$(echo "$GITHUB_REF" | sed 's|refs/tags/v||')
          cd dist/opta
          zip -r opta.zip ./*
          aws s3 cp opta.zip s3://dev-runx-opta-binaries/mac/$VERSION/ --acl public-read
