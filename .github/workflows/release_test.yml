name: Release tests

on: workflow_dispatch

jobs:
  compare-release-w-latest:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Checkout test-service repo
        uses: actions/checkout@v2
        with:
          repository: "run-x/test-service"
          path: "test-service"
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Pin terraform version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false

      - name: Limit concurrency to 1.
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ALL_GITHUB_TOKEN }}

      - name: Setup ssh
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_OPTA_CI_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_OPTA_CI_SECRET_KEY }}
          aws-region: us-east-1

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --deploy --dev
          source $(pipenv --venv)/bin/activate

      - name: Build Release Binary
        run: |
          source $(pipenv --venv)/bin/activate
          export PYTHONPATH=$(pwd)
          make build-binary

      - name: Install Latest Opta Version
        run: /bin/bash -c "$(curl -fsSL https://docs.opta.dev/install.sh)"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build test-service image
        run: docker build -t app:latest -f test-service/Dockerfile test-service/

      - name: Apply Environment with Latest Opta
        run: |
          OPTA_DISABLE_REPORTING=true /home/runner/.opta/opta apply \
          --config ./examples/ci-tests/create-and-destroy-aws/environment.yml \
          --detailed-plan \
          --auto-approve \
          --refresh

      - name: Set secret with Latest Opta
        run: |
          OPTA_DISABLE_REPORTING=true /home/runner/.opta/opta secret update \
          --env ci \
          --config ./examples/ci-tests/create-and-destroy-aws/service.yml \
          FAKE_SECRET foo

      - name: Deploy test-service with Latest Opta
        run: |
          OPTA_DISABLE_REPORTING=true /home/runner/.opta/opta deploy \
          --image app:latest \
          --env ci \
          --config ./examples/ci-tests/create-and-destroy-aws/service.yml \
          --tag ${{ github.sha }} \
          --auto-approve

      - name: View secret and check value with Latest Opta
        run: |
          secret_value=$(OPTA_DISABLE_REPORTING=true /home/runner/.opta/opta secret view \
          --env ci \
          --config ./examples/ci-tests/create-and-destroy-aws/service.yml \
          FAKE_SECRET | tail -1)
          echo "This was the found secret value: ${secret_value}"
          [[ "$secret_value" =~ .*"foo".* ]] || exit 1

      - name: Set stateful data
        env:
          OPTA_DISABLE_REPORTING: true
        run: |
          export PARENT_DOMAIN=`/home/runner/.opta/opta output --env ci --config ./examples/ci-tests/create-and-destroy-aws/service.yml | jq -r '."parent.domain"'`
          export HOST=`/home/runner/.opta/opta output --env ci --config ./examples/ci-tests/create-and-destroy-aws/service.yml | jq -r '.load_balancer_raw_dns'`
          curl -X POST -L --header "Host: test-service.${PARENT_DOMAIN}" --fail ${HOST}/stateful

      - name: Apply Environment with Release Opta
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta apply \
          --config ./examples/ci-tests/create-and-destroy-aws/environment.yml \
          --detailed-plan \
          --auto-approve \
          --refresh


      - name: Set secret with Release Opta
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta secret update \
          --env ci \
          --config ./examples/ci-tests/create-and-destroy-aws/service.yml \
          FAKE_SECRET foo

      - name: Deploy test-service with Release Opta
        run: |
          OPTA_DISABLE_REPORTING=true ./dist/opta/opta deploy \
          --image app:latest \
          --env ci \
          --config ./examples/ci-tests/create-and-destroy-aws/service.yml \
          --tag ${{ github.sha }} \
          --auto-approve

      - name: View secret and check value with Release Opta
        run: |
          secret_value=$(OPTA_DISABLE_REPORTING=true ./dist/opta/opta secret view \
          --env ci \
          --config ./examples/ci-tests/create-and-destroy-aws/service.yml \
          FAKE_SECRET | tail -1)
          echo "This was the found secret value: ${secret_value}"
          [[ "$secret_value" =~ .*"foo".* ]] || exit 1

      - name: Destroy environment (and test service) with Release Opta
        run: |
          yes | OPTA_DISABLE_REPORTING=true ./dist/opta/opta destroy \
          --env ci \
          --config ./examples/ci-tests/create-and-destroy-aws/service.yml \
          --auto-approve
          yes | OPTA_DISABLE_REPORTING=true ./dist/opta/opta destroy \
          --config ./examples/ci-tests/create-and-destroy-aws/environment.yml \
          --auto-approve

      - name: Start SSH via Ngrok
        if: ${{ failure() }}
        run: curl -sL https://gist.githubusercontent.com/juandiegopalomino/c9a3fb7f84eb6132023b1b1bc16dead7/raw/1da0059df274b82eb4c27d5ca444523fd7500a77/debug-github-actions.sh | bash
        env:
          # After sign up on the https://ngrok.com/
          # You can find this token here: https://dashboard.ngrok.com/get-started/setup
          NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}

          # This password you will use when authorizing via SSH
          USER_PASS: ${{ secrets.DEBUG_SSH_PASS }}

      - name: Don't kill instace
        if: ${{ failure() }}
        run: sleep 1h # Prevent to killing instance after failure